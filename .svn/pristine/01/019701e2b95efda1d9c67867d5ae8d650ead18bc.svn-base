package com.gsccs.cms.controller.core;

import java.io.File;
import java.util.ArrayList;
import java.util.List;
import java.util.UUID;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.commons.lang3.StringUtils;
import org.springframework.stereotype.Controller;
import org.springframework.ui.ModelMap;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartFile;

import com.gsccs.cms.auth.model.Config;
import com.gsccs.cms.auth.model.Users;
import com.gsccs.cms.auth.shiro.annotation.CurrentUser;
import com.gsccs.cms.bass.controller.CmsBaseController;
import com.gsccs.cms.bass.exception.AuthException;
import com.gsccs.cms.bass.exception.SiteCheckException;
import com.gsccs.cms.bass.utils.FileUtil;
import com.gsccs.cms.core.model.Channel;
import com.gsccs.cms.core.model.Htmlquartz;
import com.gsccs.cms.core.model.Site;
import com.gsccs.cms.core.service.ChannelService;
import com.gsccs.cms.core.service.HtmlquartzService;
import com.gsccs.cms.core.service.RoleChannelService;
import com.gsccs.cms.core.service.SensitiveService;
import com.gsccs.cms.core.service.SiteService;
import com.gsccs.cms.core.util.CmsConst;

/**
 * 栏目相关操作
 * 
 * @author x.d zhang
 * @version 1.0
 * 
 */
@Controller
@RequestMapping("/cms")
public class ChannelController extends CmsBaseController {
	@Resource
	private ChannelService channelService;
	@Resource
	private RoleChannelService roleChannelService;
	@Resource
	private HtmlquartzService htmlquartzService;
	@Resource
	private SensitiveService sensitiveService;
	@Resource
	private SiteService siteService;

	private List<Integer> hours;
	private List<Integer> mins;

	/**
	 * 管理页面
	 * 
	 * @param map
	 * @return
	 */
	@RequestMapping("/channel.do")
	public String channel(@CurrentUser Users user, String type, ModelMap map,
			HttpServletResponse response) throws AuthException,
			SiteCheckException {
		Site site = getManageSite();
		if (site != null) {
			// 栏目管理页面
			// 获取一级栏目
			List<Channel> channelList = channelService.findByPar(site.getId(),
					"par");
			// 设置是否有子栏目
			if (channelList != null && channelList.size() > 0) {
				for (int i = 0; i < channelList.size(); i++) {
					if (channelService.hasChildren(channelList.get(i).getId())) {
						channelList.get(i).setHasChildren("true");
					}
					if (!isSysAdmin() && !isSiteAdmin()) {
						// 如果是普通管理员则设置是否有权限管理
						if (roleChannelService.haves(getLoginRoleIdsSql(),
								channelList.get(i).getId())) {
							channelList.get(i).setHaveChannelRole("true");
						}
					}
				}
			}
			map.put("channelList", channelList);
			map.put("site", site);
		}
		if ("select".equals(type)) {
			return "cms/channelSelect";
		}
		return "cms/channel";
	}

	/**
	 * 下级数据
	 * 
	 * @param map
	 * @return
	 */
	@RequestMapping("/channelSon.do")
	public String channelSon(@CurrentUser Users user, String pid,
			String plevel, ModelMap map, HttpServletResponse response)
			throws AuthException, SiteCheckException {
		if (StringUtils.isNotEmpty(pid) && StringUtils.isNotEmpty(plevel)) {
			// 提取子
			List<Channel> channelList = channelService.findByPar("", pid);
			// 设置是否有子栏目
			if (channelList != null && channelList.size() > 0) {
				for (int i = 0; i < channelList.size(); i++) {
					if (channelService.hasChildren(channelList.get(i).getId())) {
						channelList.get(i).setHasChildren("true");
					}
					if (!isSysAdmin() && !isSiteAdmin()) {
						// 如果是普通管理员则设置是否有权限管理
						if (roleChannelService.haves(getLoginRoleIdsSql(),
								channelList.get(i).getId())) {
							channelList.get(i).setHaveChannelRole("true");
						}
					}
				}
			}
			map.put("channelList", channelList);
			try {
				map.put("level", Integer.parseInt(plevel) + 1);
			} catch (Exception e) {
			}
		}
		return "cms/channelSon";
	}

	/**
	 * 编辑页面
	 * 
	 * @param map
	 * @return
	 */
	@RequestMapping("/channelEdit.do")
	public String channelEdit(String pid, String id, ModelMap map,
			HttpServletResponse response) throws SiteCheckException {
		Site site = getManageSite();
		if (StringUtils.isNotEmpty(id)) {
			// 编辑页面
			Channel channel = channelService.findById(id);
			Htmlquartz htmlquartz = htmlquartzService.findByChannelid(id);
			// 编辑页面
			map.put("htmlquartz", htmlquartz);
			map.put("channel", channel);
		} else {
			// 添加页面
			Channel channel = new Channel();
			channel.setParid(pid);
			map.put("channel", channel);
		}
		map.put("site", site);
		map.put("hours", getHours());
		map.put("mins", getMins());
		return "cms/channelEdit";
	}

	/**
	 * 编辑
	 * 
	 * @param map
	 * @return
	 */
	@RequestMapping("/channelEditDo.do")
	public String channelEditDo(
			Channel channel,
			@RequestParam(value = "imgfile", required = false) MultipartFile imgfile,
			String oldImg, String pageFuncId, String htmlquartz_type,
			String htmlquartz_intervaltype, String htmlquartz_exetimehour,
			String htmlquartz_exetimemin, String htmlquartz_intervalmin,
			String htmlquartz_intervalhour, ModelMap map,
			HttpServletResponse response) throws SiteCheckException {
		String oper = "添加";
		try {

			Site site = getManageSite();
			Config sitePathConfig = configService
					.findByCode(CmsConst.SITE_ROOT_PATH_CODE);
			String rootPath = sitePathConfig.getConfigvalue();
			String sitePath = rootPath + "/" + site.getSourcepath() + "/";

			channel.setSite(site.getId());
			// 敏感词处理
			channel.setName(sensitiveService.replace(channel.getName()));
			channel.setDescription(sensitiveService.replace(channel
					.getDescription()));
			/*
			 * if(channel.getPagemark()==null ||
			 * channel.getPagemark().equals("")){
			 * System.out.println("indexnum====" +channel.getIndexnum());
			 * System.out.println("name====" +channel.getName());
			 * if(channel.getIndexnum() > 0){ System.out.println("1");
			 * channel.setPagemark("channel_"+channel.getIndexnum()); }else{
			 * System.out.println("2");
			 * channel.setPagemark("channel_"+channelService.maxIndexNum()); } }
			 */
			if (channel.getOrdernum() == null) {
				channel.setOrdernum(channelService.maxNum(site.getId(),
						channel.getParid()));
			}
			if (channel.getId() != null && channel.getId().trim().length() > 0) {
				// 更新

				oper = "更新";
				/*
				 * System.out.println(channel.getId()+
				 * "++++=================channel_"+channel.getIndexnum());
				 * channel.setPagemark("channel_"+channel.getIndexnum());
				 */
				Channel oldChannel = channelService.findById(channel.getId());
				// 如果原来有和现在的pagemark不同则判断新的pagemark是否存在
				if (channel.getPagemark() != null
						&& channel.getPagemark().trim().length() > 0
						&& !channel.getPagemark().equals(
								oldChannel.getPagemark())) {
					if (channelService.hasPagemark(channel.getSite(),
							channel.getPagemark())) {
						map.put("msg", "此页面标识已存在!");
						map.put("isBack", true);
						return "admin/msg";
					}
					// 修改栏目静态文件目录
					String folder = "";
					File folderFile = null;
					if (oldChannel.getPagemark() != null
							&& oldChannel.getPagemark().trim().length() > 0) {
						folder = oldChannel.getPagemark().trim();
						folderFile = new File(sitePath + folder);
					}
					if ((folderFile == null || !folderFile.exists())
							&& oldChannel.getIndexnum() > 0) {
						folder = String.valueOf(oldChannel.getIndexnum());
						folderFile = new File(sitePath + folder);
					}
					if (folderFile == null || !folderFile.exists()) {
						folder = oldChannel.getId();
						folderFile = new File(sitePath + folder);
					}
					// 判断目录是否存在
					if (folderFile.exists()) {
						// 修改目录名
						folderFile.renameTo(new File(sitePath
								+ channel.getPagemark().trim()));
					}
				}
				// 如果原来有pagemark，现在删除了
				if (oldChannel.getPagemark() != null
						&& oldChannel.getPagemark().trim().length() > 0
						&& (channel.getPagemark() == null || channel
								.getPagemark().trim().length() == 0)) {
					channel.setPagemark("channel_" + oldChannel.getIndexnum());
					// 修改栏目静态文件目录
					String folder = "";
					File folderFile = null;
					folder = oldChannel.getPagemark().trim();
					folderFile = new File(sitePath + folder);
					// 判断目录是否存在
					if (folderFile.exists()) {
						// 修改目录名
						String rename = "";
						if (oldChannel.getIndexnum() > 0) {
							rename = String.valueOf(oldChannel.getIndexnum());
						} else {
							rename = oldChannel.getId();
						}
						folderFile.renameTo(new File(sitePath + rename));
					}
				}
				if (!oldImg.equals(oldChannel.getImg())
						&& oldChannel.getImg() != null
						&& oldChannel.getImg().trim().length() > 0) {
					FileUtil.del(request.getRealPath("/")
							+ oldChannel.getImg().trim());
				} else {
					channel.setImg(oldImg);
				}
				if (imgfile != null && imgfile.getSize() > 0) {
					// 生成目标文件
					String ext = FileUtil.getExt(imgfile.getOriginalFilename())
							.toLowerCase();
					if (!".jpg".equals(ext) && !".jpeg".equals(ext)
							&& !".gif".equals(ext) && !".png".equals(ext)) {
						map.put("msg", "栏目图片只能上传jpg,jpeg,gif,png格式的图片!");
						map.put("isBack", true);
						return "admin/msg";
					}
					String id = UUID.randomUUID().toString();
					File targetFile = new File(sitePath + "/upload/"
							+ site.getId() + "/" + id + ext);
					File folder = new File(sitePath + "/upload/" + site.getId()
							+ "/");
					if (!folder.exists()) {
						folder.mkdir();
					}
					if (!targetFile.exists()) {
						targetFile.createNewFile();
					}
					// 复制到目标文件
					FileUtil.copy(imgfile, targetFile);
					// 生成访问地址
					channel.setImg("/upload/" + site.getId() + "/" + id + ext);
				}
				channelService.update(channel);

				// 处理静态化调度
				Htmlquartz htmlquartz = htmlquartzService
						.findByChannelid(channel.getId());
				boolean isinsert = true;
				if (htmlquartz != null) {
					isinsert = false;
				} else {
					htmlquartz = new Htmlquartz();
				}
				htmlquartz.setType(htmlquartz_type);
				htmlquartz.setIntervaltype(htmlquartz_intervaltype);
				try {
					htmlquartz.setExetimehour(Integer
							.parseInt(htmlquartz_exetimehour));
				} catch (Exception e) {
				}
				try {
					htmlquartz.setExetimemin(Integer
							.parseInt(htmlquartz_exetimemin));
				} catch (Exception e) {
				}
				try {
					htmlquartz.setIntervalhour(Integer
							.parseInt(htmlquartz_intervalhour));
				} catch (Exception e) {
				}
				try {
					htmlquartz.setIntervalmin(Integer
							.parseInt(htmlquartz_intervalmin));
				} catch (Exception e) {
				}
				htmlquartz.setSiteid(site.getId());
				htmlquartz.setChannelid(channel.getId());
				if (isinsert) {
					htmlquartzService.insert(htmlquartz);
				} else {
					htmlquartz.setLastexetime(null);
					htmlquartz.setNextexetime(null);
					htmlquartzService.update(htmlquartz);
				}
				operlogService.log(getLoginName(), "更新栏目 " + channel.getName(),
						request);
			} else {
				// 添加
				// 判断页面标识是否存在
				if (StringUtils.isNotEmpty(channel.getPagemark())) {
					if (channelService.hasPagemark(channel.getSite(),
							channel.getPagemark())) {
						map.put("msg", "此页面标识已存在!");
						map.put("isBack", true);
						return "admin/msg";
					}
				} else {
					channel.setPagemark("" + channelService.maxIndexNum());
				}
				if (imgfile != null && imgfile.getSize() > 0) {
					// 生成目标文件
					String ext = FileUtil.getExt(imgfile.getOriginalFilename())
							.toLowerCase();
					if (!".jpg".equals(ext) && !".jpeg".equals(ext)
							&& !".gif".equals(ext) && !".png".equals(ext)) {
						map.put("msg", "栏目图片只能上传jpg,jpeg,gif,png格式的图片!");
						map.put("isBack", true);
						return "admin/msg";
					}
					String id = UUID.randomUUID().toString();
					File targetFile = new File(sitePath + "/upload/"
							+ site.getId() + "/" + id + ext);
					File folder = new File(sitePath + "/upload/" + site.getId()
							+ "/");
					if (!folder.exists()) {
						folder.mkdir();
					}
					if (!targetFile.exists()) {
						targetFile.createNewFile();
					}
					// 复制到目标文件
					FileUtil.copy(imgfile, targetFile);
					// 生成访问地址
					channel.setImg("/upload/" + site.getId() + "/" + id + ext);
				}
				channelService.insert(channel);
				// 处理静态化调度
				Htmlquartz htmlquartz = new Htmlquartz();
				htmlquartz.setType(htmlquartz_type);
				htmlquartz.setIntervaltype(htmlquartz_intervaltype);
				try {
					htmlquartz.setExetimehour(Integer
							.parseInt(htmlquartz_exetimehour));
				} catch (Exception e) {
				}
				try {
					htmlquartz.setExetimemin(Integer
							.parseInt(htmlquartz_exetimemin));
				} catch (Exception e) {
				}
				try {
					htmlquartz.setIntervalhour(Integer
							.parseInt(htmlquartz_intervalhour));
				} catch (Exception e) {
				}
				try {
					htmlquartz.setIntervalmin(Integer
							.parseInt(htmlquartz_intervalmin));
				} catch (Exception e) {
				}
				htmlquartz.setSiteid(site.getId());
				htmlquartz.setChannelid(channel.getId());
				htmlquartzService.insert(htmlquartz);

				// 静态化 @modify 20140722
				// 本栏目静态化
				channelService.html(site, channel, getApplication(), request,
						getLoginName(), 0);
				// 本栏目的父栏目静态化
				List<Channel> channeList = channelService.findPath(channel
						.getId());
				if (channeList != null && channeList.size() > 0) {
					for (int i = 0; i < channeList.size(); i++) {
						if (!channeList.get(i).getId().equals(channel.getId())) {
							channelService.html(site, channeList.get(i),
									getApplication(), request, getLoginName(),
									0);
						}
					}
				}
				// 首页静态化
				siteService.html(channel.getSite(), getApplication(),
						getBasePath(), request, getLoginName());

				operlogService.log(getLoginName(), "添加栏目 " + channel.getName(),
						request);
			}
			msg = oper + "栏目 " + channel.getName() + " 成功";
			map.put("forwardSeconds", 3);
			map.put("msg", msg);
			map.put("forwardUrl", "channel.do?pageFuncId=" + pageFuncId);
			return "admin/msg";
			// return "cms/channelMakehtml";
		} catch (Exception e) {
			e.printStackTrace();
			msg = oper + "栏目 " + channel.getName() + " 操作失败:" + e.toString();
			map.put("msg", msg);
			map.put("isBack", true);
			return "admin/msg";
		}
	}

	/**
	 * 静态化
	 * 
	 * @param map
	 * @return
	 */
	@RequestMapping("/channelMakehtml.do")
	public String channelMakehtml(String id, String pageFuncId,
			String htmlChannel, String htmlChannelPar, String htmlIndex,
			ModelMap map, HttpServletResponse response) throws AuthException,
			SiteCheckException {
		if (StringUtils.isNotEmpty(id)) {
			Channel channel = channelService.findById(id);
			Site site = siteService.findById(channel.getSite());
			try {
				if ("1".equals(htmlChannel)) {
					// 本栏目静态化
					channelService.html(site, channel, getApplication(),
							request, getLoginName(), 0);
				}
				if ("1".equals(htmlChannelPar)) {
					// 本栏目的父栏目静态化
					List<Channel> channeList = channelService.findPath(channel
							.getId());
					if (channeList != null && channeList.size() > 0) {
						for (int i = 0; i < channeList.size(); i++) {
							if (!channeList.get(i).getId()
									.equals(channel.getId())) {
								channelService.html(site, channeList.get(i),
										getApplication(), request,
										getLoginName(), 0);
							}
						}
					}
				}
				if ("1".equals(htmlIndex)) {
					// 首页静态化
					siteService.html(channel.getSite(), getApplication(),
							getBasePath(), request, getLoginName());
				}
				msg = "静态化处理成功!";
				map.put("forwardSeconds", 3);
			} catch (Exception e) {
				e.printStackTrace();
				msg = "静态化处理失败，原因:"
						+ e.getMessage().replace("<", "&lt;")
								.replace(">", "&gt;").replace("\n", "<br/>");
				map.put("forwardSeconds", 0);
			}
		}
		map.put("msg", msg);
		map.put("forwardUrl", "channel.do?pageFuncId=" + pageFuncId);
		return "admin/msg";
	}

	/**
	 * 转移页面
	 * 
	 * @param map
	 * @return
	 */
	@RequestMapping("/channelTree.do")
	public String channelTree(@CurrentUser Users user, String siteid,
			ModelMap map, HttpServletResponse response) throws AuthException,
			SiteCheckException {
		Site site = getManageSite();
		if (StringUtils.isNotEmpty(siteid)) {
			site = siteService.findById(siteid);
		}
		if (site != null) {
			// 查询一级
			List<Channel> channelList = channelService.findByPar(site.getId(),
					"par");
			// 设置是否有子栏目
			if (channelList != null && channelList.size() > 0) {
				for (int i = 0; i < channelList.size(); i++) {
					if (channelService.hasChildren(channelList.get(i).getId())) {
						channelList.get(i).setHasChildren("true");
					}
					if (!isSysAdmin() && !isSiteAdmin()) {
						// 如果是普通管理员则设置是否有权限管理
						if (roleChannelService.haves(getLoginRoleIdsSql(),
								channelList.get(i).getId())) {
							channelList.get(i).setHaveChannelRole("true");
						}
					}
				}
			}
			map.put("channelList", channelList);
		}
		return "cms/channelTree";
	}

	/**
	 * 子站点
	 * 
	 * @param map
	 * @return
	 */
	@RequestMapping("/channelSonTree.do")
	public String channelSonTree(@CurrentUser Users user, String pid,
			String plevel, ModelMap map, HttpServletResponse response)
			throws AuthException, SiteCheckException {
		if (StringUtils.isNotEmpty(pid) && StringUtils.isNotEmpty(plevel)) {
			// 提取子菜单
			List<Channel> channelList = channelService.findByPar("", pid);
			// 设置是否有子栏目
			if (channelList != null && channelList.size() > 0) {
				for (int i = 0; i < channelList.size(); i++) {
					if (channelService.hasChildren(channelList.get(i).getId())) {
						channelList.get(i).setHasChildren("true");
					}
					if (!isSysAdmin() && !isSiteAdmin()) {
						// 如果是普通管理员则设置是否有权限管理
						if (roleChannelService.haves(getLoginRoleIdsSql(),
								channelList.get(i).getId())) {
							channelList.get(i).setHaveChannelRole("true");
						}
					}
				}
			}
			map.put("channelList", channelList);
			try {
				map.put("level", Integer.parseInt(plevel) + 1);
			} catch (Exception e) {
			}
		}
		return "cms/channelSonTree";
	}

	/**
	 * 转移处理
	 * 
	 * @param map
	 * @return
	 */
	@RequestMapping("/channelPar.do")
	public String channelPar(String id, String pid, HttpServletRequest request,
			ModelMap map, HttpServletResponse response) throws AuthException,
			SiteCheckException {
		String msg = "";
		if (StringUtils.isNotEmpty(id)) {
			Channel channel = channelService.findById(id);
			if (StringUtils.isNotEmpty(pid)) {
				Channel parChannel = channelService.findById(pid);
				if (parChannel != null) {
					msg = "改变栏目 " + channel.getName() + " 的所属栏目为 "
							+ parChannel.getName() + " ";
				}
			} else {
				msg = "改变栏目 " + channel.getName() + " 的所属栏目为 根栏目 ";
			}
			if (channel != null) {
				try {
					channel.setParid(pid);
					channelService.update(channel);
					msg += "成功!";
				} catch (Exception e) {
					msg += "失败:" + e.toString();
				}
				operlogService.log(getLoginName(), msg, request);
			}
		}
		map.put("isCloseWindow", true);
		map.put("isRefresh", true);
		operlogService.log(getLoginName(), msg, request);
		map.put("msg", msg);
		return "admin/msg";
	}

	/**
	 * 删除
	 * 
	 * @param map
	 * @return
	 */
	@RequestMapping("/channelDel.do")
	public String channelDel(String pageFuncId, String ids, ModelMap map,
			HttpServletResponse response) throws AuthException,
			SiteCheckException {
		if (ids != null && ids.trim().length() > 0) {
			String[] idArr = ids.split(";");
			if (idArr != null && idArr.length > 0) {
				Channel channel;
				for (int i = 0; i < idArr.length; i++) {
					if (idArr[i].trim().length() > 0) {
						channel = channelService.findById(idArr[i]);
						if (channel != null) {
							try {
								channelService.del(idArr[i], request);
								operlogService.log(getLoginName(), "删除栏目成功:"
										+ channel.getName(), request);
							} catch (Exception e) {
								operlogService.log(
										getLoginName(),
										"删除栏目失败:" + channel.getName() + " "
												+ e.getMessage(), request);
							}
						}
					}
				}
			}
		}
		map.put("msg", "操作成功");
		map.put("forwardUrl", "channel.do?pageFuncId=" + pageFuncId);
		map.put("forwardSeconds", 3);
		return "admin/msg";
	}

	/**
	 * 排序
	 * 
	 * @param map
	 * @return
	 */
	@RequestMapping("/channelOrder.do")
	public String channelOrder(@CurrentUser Users user, String id, String type,
			ModelMap map, HttpServletResponse response) throws AuthException,
			SiteCheckException {
		if (StringUtils.isNotEmpty(id)) {
			Channel channel = channelService.findById(id);
			if (channel != null) {
				String msg = "";
				try {
					if ("up".equals(type)) {
						msg += "上升";
						channelService.up(channel);
					} else if ("down".equals(type)) {
						msg += "下降";
						channelService.down(channel);
					}
				} catch (Exception e) {
					msg += "栏目 " + channel.getName() + " 失败:" + e.toString();
				}
				msg += "栏目 " + channel.getName() + " 成功";
				operlogService.log(getLoginName(), msg, request);
			}
		}
		return channel(user, "", map, response);
	}

	public List<Integer> getHours() {
		hours = new ArrayList<Integer>();
		for (int i = 0; i < 24; i++) {
			hours.add(i);
		}
		return hours;
	}

	public void setHours(List<Integer> hours) {
		this.hours = hours;
	}

	public List<Integer> getMins() {
		mins = new ArrayList<Integer>();
		for (int i = 0; i < 60; i++) {
			mins.add(i);
		}
		return mins;
	}

	public void setMins(List<Integer> mins) {
		this.mins = mins;
	}

}
