package com.gsccs.cms.freemarker.directive;

import java.io.IOException;
import java.io.Writer;
import java.util.List;
import java.util.Map;

import javax.annotation.Resource;

import org.springframework.stereotype.Service;

import com.gsccs.cms.bass.base.BaseDirective;
import com.gsccs.cms.core.model.Channel;
import com.gsccs.cms.core.model.Site;
import com.gsccs.cms.core.service.ChannelService;
import com.gsccs.cms.core.service.SiteService;

import freemarker.core.Environment;
import freemarker.ext.beans.BeanModel;
import freemarker.ext.beans.BeansWrapper;
import freemarker.template.TemplateDirectiveBody;
import freemarker.template.TemplateDirectiveModel;
import freemarker.template.TemplateException;
import freemarker.template.TemplateModel;

/**
 * 
 * 参数 
 * id		栏目id
 * siteid	站点id
 * pagemark	栏目页面标识
 * checkHasSon 是否检查有子栏目 1是
 * 
 * 返回值
 * channel 栏目对象
 * 
 * @author x.d zhang
 * @version 1.0
 * 
 */

@Service("channelDirective")
public class ChannelDirective extends BaseDirective implements TemplateDirectiveModel{
	
	@Resource
	private ChannelService channelService;
	@Resource
	private SiteService siteService;
	
	
	public void execute(Environment env, Map params, TemplateModel[] loopVars, 
			TemplateDirectiveBody body)throws TemplateException, IOException {
		
		//获取参数
		//栏目id
		String channelid=getParam(params, "id");
		//站点id
		String siteid=getParam(params, "siteid");
		//栏目页面标识
		String pagemark=getParam(params, "pagemark");
				
		
		Writer out =env.getOut();
		if (body!=null) {
			//设置循环变量
			if (loopVars!=null && loopVars.length>0 ) {
				//查询栏目
				Channel channel=null;
				//有channelid参数则根据channelid参数查询
				if (channelid.trim().length()>0) {
					channel=channelService.findById(channelid);
				}else if (siteid.trim().length()>0 && pagemark.trim().length()>0) {
					channel = channelService.findBySitePagemark(siteid, pagemark);
				}
				if (channel!=null) {
					loopVars[0]=new BeanModel(channel,new BeansWrapper());  
					body.render(env.getOut());  
				}
			}
		}
	}

}
