package com.gsccs.cms.controller.module;

import java.util.Date;
import java.util.List;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.commons.lang3.StringUtils;
import org.springframework.stereotype.Controller;
import org.springframework.ui.ModelMap;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;

import com.gsccs.cms.bass.controller.CmsBaseController;
import com.gsccs.cms.bass.utils.Pager;
import com.gsccs.cms.core.service.SensitiveService;
import com.gsccs.cms.module.model.VoteTopic;
import com.gsccs.cms.module.service.VoteService;

/**
 * 网上调查
 * 
 * @author x.d zhang
 * @version 1.0
 * 
 */
@Controller
public class VoteController extends CmsBaseController {

	@Resource
	private VoteService voteService;
	@Resource
	private SensitiveService sensitiveService;

	/**
	 * 管理页面
	 * 
	 * @param map
	 * @return
	 */

	@RequestMapping("/question.do")
	public String question(VoteTopic question,
			@RequestParam(defaultValue = "1") int currPage,
			@RequestParam(defaultValue = "10") int pageSize,
			@RequestParam(defaultValue = "") String order, ModelMap map,
			HttpServletRequest request, HttpServletResponse response) {
		if (question == null) {
			question = new VoteTopic();
		}
		question.setSiteid(getManageSite().getId());
		List<VoteTopic> questionList = voteService.find(question, order,
				currPage, pageSize, false);
		int totalCount = voteService.count(question, false);
		Pager pager = new Pager(request);
		pager.appendParam("id");
		pager.appendParam("name");
		pager.appendParam("selecttype");
		pager.appendParam("isok");
		pager.appendParam("pageSize", "" + pageSize);
		pager.appendParam("pageFuncId");
		pager.setCurrPage(currPage);
		pager.setPageSize(pageSize);
		pager.setTotalCount(totalCount);
		pager.setOutStrBootstrap("question.do");
		map.put("pageStr", pager.getOutStrBootstrap());
		map.put("list", questionList);
		map.put("order", order);
		return "cms/question";
	}

	/**
	 * 编辑页面
	 * 
	 * @param map
	 * @return
	 */

	@RequestMapping("/questionEdit.do")
	public String questionEdit(VoteTopic question, ModelMap map,
			HttpServletRequest request, HttpServletResponse response) {
		if (question != null && question.getId() != null
				&& question.getId().trim().length() > 0) {
			question = voteService.findById(question.getId(), false);
			map.put("question", question);
		}
		return "cms/questionEdit";
	}

	/**
	 * 编辑
	 * 
	 * @param map
	 * @return
	 */
	@RequestMapping("/questionEditDo.do")
	public String questionEditDo(VoteTopic question, ModelMap map,
			HttpServletRequest request, HttpServletResponse response) {
		String oper = "添加";
		try {
			// 敏感词处理
			question.setName(sensitiveService.replace(question.getName()));
			question.setDetail(sensitiveService.replace(question.getDetail()));
			if (question != null && StringUtils.isNotEmpty(question.getId())) {
				VoteTopic oldQuestion = voteService.findById(question.getId(),
						false);
				if (oldQuestion != null) {
					oldQuestion.setName(question.getName());
					oldQuestion.setSelecttype(question.getSelecttype());
					oldQuestion.setIsok(question.getIsok());
					oldQuestion.setDetail(question.getDetail());
					oper = "修改";
					voteService.update(oldQuestion);
				}
			} else {
				// 添加
				question.setAdduser(getLoginUser().getId());
				question.setAddtime(new Date());
				question.setSiteid(getManageSite().getId());
				voteService.add(question);
			}
			msg = oper + "网上调查(" + question.getName() + ")成功!";
		} catch (Exception e) {
			e.printStackTrace();
			msg = oper + "网上调查(" + question.getName() + ")失败:" + e.toString()
					+ "!";
		}
		operlogService.log(getLoginName(), msg, request);
		map.put("msg", msg);
		map.put("isCloseWindow", true);
		map.put("isRefresh", true);
		return "admin/msg";
	}

	/**
	 * 删除
	 * 
	 * @param map
	 * @return
	 */
	@RequestMapping("/questionDel.do")
	public String questionDel(String pageFuncId, String ids,
			HttpServletRequest request, ModelMap map,
			HttpServletResponse response){
		if (ids != null && ids.trim().length() > 0) {
			String[] idArr = ids.split(";");
			if (idArr != null && idArr.length > 0) {
				VoteTopic question = null;
				for (int i = 0; i < idArr.length; i++) {
					if (idArr[i].trim().length() > 0) {
						try {
							question = voteService.findById(idArr[i], false);
							if (question != null) {
								voteService.del(question.getId());
								msg = "删除网上调查(" + question.getName() + ")成功!";
							}
						} catch (Exception e) {
							e.printStackTrace();
							msg = "删除网上调查(" + question.getName() + ")失败:"
									+ e.toString() + "!";
						}
						operlogService.log(getLoginName(), msg, request);
					}
				}
			}
		}
		map.put("msg", "操作成功");
		map.put("forwardUrl", "question.do?pageFuncId=" + pageFuncId);
		map.put("forwardSeconds", 3);
		return "admin/msg";
	}
}
