package com.gsccs.cms.freemarker.directive;

import java.io.IOException;
import java.io.Writer;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.Map;

import javax.annotation.Resource;

import org.springframework.stereotype.Service;

import com.gsccs.cms.bass.base.BaseDirective;
import com.gsccs.cms.bass.utils.DateUtil;
import com.gsccs.cms.core.model.Channel;
import com.gsccs.cms.core.model.Content;
import com.gsccs.cms.core.model.Site;
import com.gsccs.cms.core.service.ChannelService;
import com.gsccs.cms.core.service.ContentService;
import com.gsccs.cms.core.service.SiteService;

import freemarker.core.Environment;
import freemarker.ext.beans.BeanModel;
import freemarker.ext.beans.BeansWrapper;
import freemarker.template.SimpleNumber;
import freemarker.template.TemplateDirectiveBody;
import freemarker.template.TemplateDirectiveModel;
import freemarker.template.TemplateException;
import freemarker.template.TemplateModel;

/**
 * 
 * <p>
 * Title: InfoListDirective.java
 * </p>
 * 
 * <p>
 * Description: 信息列表标签 参数 siteid 站点id channelid 栏目id channelParid 栏目parid num
 * 显示数量 order 排序类型 1 固顶有效并降序,发布时间降序(默认) 2 固顶有效并降序,发布时间升序 3 发布时间降序 4 发布时间升序
 * titleLen 标题显示长度 hot 是否按点击热度倒序，1是 dateFormat 日期格式 channelPagemark 栏目页面标识
 * channelParPagemark 父栏目页面标识 img 是否只提取带图片的新闻 1是 checkOpenendtime 检查公开时限
 * 默认不检查，1检查 newdays 几天内为最新
 * 
 * 返回值 info 信息对象 index 索引
 * 
 * 
 * 使用示例
 * </p>
 * 
 * 
 * @author x.d zhang
 * @version 1.0
 * 
 */
@Service("infoListDirective")
public class InfoListDirective extends BaseDirective implements
		TemplateDirectiveModel {

	@Resource
	private SiteService siteService;
	@Resource
	private ContentService contentService;
	@Resource
	private ChannelService channelService;

	public void execute(Environment env, Map params, TemplateModel[] loopVars,
			TemplateDirectiveBody body) throws TemplateException, IOException {

		// 获取参数
		// 站点id
		String siteid = getParam(params, "siteid");
		// 栏目id
		String channelid = getParam(params, "channelid");
		String channelParid = getParam(params, "channelParid");
		// 显示数量
		int num = getParamInt(params, "num", 10);
		// 排序
		String order = getParam(params, "order", "1");
		// 标题长度
		int titleLen = getParamInt(params, "titleLen", 0);
		// 描述长度
		int descriptionLen = getParamInt(params, "descriptionLen", 0);
		// 几天内为最新
		int newdays = getParamInt(params, "newdays", 0);
		// 是否按点击热度查询
		String hot = getParam(params, "hot");
		// 日期格式
		String dateFormat = getParam(params, "dateFormat");
		// 栏目页面标识
		String channelPagemark = getParam(params, "channelPagemark");
		String channelParPagemark = getParam(params, "channelParPagemark");
		String includePagemark = getParam(params, "includePagemark");
		// 是否只提取带图片的信息
		String img = getParam(params, "img");

		if (body != null) {
			// 设置循环变量
			if (loopVars != null && loopVars.length > 0) {
				// 查询信息
				Content info = new Content();
				if (siteid.trim().length() > 0) {
					info.setSite(siteid);
				}
				if (channelid.trim().length() > 0) {
					info.setChannel(channelid);
				}
				
				if (channelPagemark.trim().length() > 0) {
					info.setChannelPagemark(channelPagemark);
				}
				
				if (channelParid.trim().length() > 0) {
					List<String> channelids = new ArrayList<String>();
					channelids.add(channelParid);
					List<Channel> sonList = channelService.findSon(siteid,
							channelParid, "1", "");
					if (sonList != null && sonList.size() > 0) {
						for (int i = 0; i < sonList.size(); i++) {
							channelids.add(sonList.get(i).getId());
						}
					}
					info.setChannelids(channelids);
				}
				
				if (img.trim().length() > 0) {
					info.setImg(img);
				}
				String orderSql = "";
				if ("1".equals(hot)) {
					orderSql = " clickNum desc,addtime desc ";
				} else {
					if ("1".equals(order)) {
						// 固顶有效并降序,发布时间降序(默认)
						orderSql = " isTop desc,addtime desc";
					} else if ("2".equals(order)) {
						// 固顶有效并降序,发布时间升序
						orderSql = " isTop desc,addtime";
					} else if ("3".equals(order)) {
						// 发布时间倒序
						orderSql = " addtime desc";
					} else if ("4".equals(order)) {
						// 发布时间升序
						orderSql = " addtime";
					}
				}
				List<Content> infoList = contentService.find(info, orderSql, 1,
						num);
				System.out.println("infolist:"+infoList.size());
				Site site = siteService.findById(siteid);
				if (infoList != null && infoList.size() > 0) {
					for (int i = 0; i < infoList.size(); i++) {
						if (titleLen > 0) {
							infoList.get(i).setShowtitleLen(titleLen);
						}
						if (descriptionLen > 0) {
							infoList.get(i).setShowdescriptionLen(
									descriptionLen);
						}
						if (dateFormat.trim().length() > 0) {
							infoList.get(i).setDateFormat(dateFormat);
						}
						loopVars[0] = new BeanModel(infoList.get(i),
								new BeansWrapper());
						if (loopVars.length > 1) {
							loopVars[1] = new SimpleNumber(i);
						}
						body.render(env.getOut());
					}
				}
			}
		}
	}

}
