package com.gsccs.cms.controller.exam;

import io.github.elkan1788.mpsdk4j.vo.api.Template;

import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.util.UUID;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.commons.lang3.StringUtils;
import org.springframework.beans.propertyeditors.CustomDateEditor;
import org.springframework.stereotype.Controller;
import org.springframework.ui.ModelMap;
import org.springframework.web.bind.WebDataBinder;
import org.springframework.web.bind.annotation.InitBinder;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;

import com.gsccs.cms.auth.service.ConfigService;
import com.gsccs.cms.auth.service.UnitService;
import com.gsccs.cms.bass.controller.CmsBaseController;
import com.gsccs.cms.bass.utils.Pager;
import com.gsccs.cms.core.service.SensitiveService;
import com.gsccs.cms.course.model.Course;
import com.gsccs.cms.course.model.CourseFeed;
import com.gsccs.cms.course.model.CourseInfo;
import com.gsccs.cms.course.model.CourseUser;
import com.gsccs.cms.course.service.CourseService;
import com.gsccs.cms.course.service.CourseUserService;
import com.gsccs.cms.member.model.Member;
import com.gsccs.cms.member.service.MemberService;
import com.gsccs.cms.weixin.model.WxApp;
import com.gsccs.cms.weixin.service.WxAppService;
import com.gsccs.weixin.service.TemplateApi;

/**
 * 课程管理
 * 
 * @author x.d zhang
 * @version 1.0
 * 
 */
@Controller
@RequestMapping("/course")
public class CourseController extends CmsBaseController {

	private String WXAPPID = "wx1562950d23bf4c3a";
	
	private String DOMAIN = "http://www.pcwxdj.com";

	@Resource
	private CourseService courseService;
	@Resource
	private UnitService unitService;
	@Resource
	private SensitiveService sensitiveService;
	@Resource
	private MemberService memberService;
	@Resource
	private CourseUserService courseUserService;
	@Resource
	private TemplateApi templateApi;
	@Resource
	private WxAppService wxAppService;
	@Resource
	private ConfigService configService;

	/**
	 * 管理页面
	 * 
	 * @param map
	 * @return
	 */
	@RequestMapping("/list.do")
	public String courseList(Course param,
			@RequestParam(defaultValue = "1") int currPage,
			@RequestParam(defaultValue = "10") int pageSize,
			@RequestParam(defaultValue = "addtime desc") String order,
			ModelMap map, HttpServletRequest request,
			HttpServletResponse response) {
		List<Course> courseList = courseService.find(param, order, currPage,
				pageSize);
		int totalCount = courseService.count(param);
		Pager pager = new Pager(request);
		pager.appendParam("id");
		pager.appendParam("title");
		pager.appendParam("pageSize", "" + pageSize);
		pager.appendParam("pageFuncId");
		pager.setCurrPage(currPage);
		pager.setPageSize(pageSize);
		pager.setTotalCount(totalCount);
		pager.setOutStrBootstrap("list.do");
		map.put("pageStr", pager.getOutStrBootstrap());
		map.put("list", courseList);
		map.put("order", order);
		return "course/course_list";
	}

	/**
	 * 新增页面
	 * 
	 * @param map
	 * @return
	 */
	@RequestMapping("/form.do")
	public String form(String id, ModelMap map, HttpServletRequest request,
			HttpServletResponse response) {
		if (StringUtils.isNotEmpty(id)) {
			Course course = courseService.getCourse(Integer.parseInt(id));
			map.put("course", course);
			return "course/course_form";
		} else {
			Member member = new Member();
			member.setWxappid(WXAPPID);
			List<Member> partyMember = memberService.find(member, "");

			map.put("partyMember", partyMember);
			return "course/course_form";
		}
	}

	/**
	 * 保存
	 * 
	 * @param map
	 * @return
	 * @throws ParseException
	 */
	@RequestMapping("/save.do")
	public String editDo(Course course,ModelMap map, HttpServletRequest request,
			HttpServletResponse response,
			String openids
			) {
		String oper = "添加";

		WxApp wxApp = wxAppService.findById(WXAPPID);
		
		if (null==course){
			msg = "课程保存失败";
			map.put("msg", msg);
			map.put("isCloseWindow", true);
			map.put("isRefresh", true);
			return "admin/msg";
		}
		try {
			Integer courseid = course.getId();
			// 添加course
			String[] openid = openids.split(";");
			SimpleDateFormat sim = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
			course.setPlannum(Integer.valueOf(openid.length));
			if (null != courseid){
				courseService.editCourse(course);
			}else{
				courseid = courseService.addCourse(course);
			}
			
			if (null==courseid){
				msg = "课程保存失败，请检查数据是否正确";
				map.put("msg", msg);
				map.put("isCloseWindow", true);
				map.put("isRefresh", true);
				return "admin/msg";
			}
			// 添加course user
			for (String str : openid) {
				CourseUser user = new CourseUser();
				user.setId(UUID.randomUUID().toString());
				user.setCourseid(courseid + "");
				user.setUserid(str);
				courseUserService.add(user);
			}

			// 推送微信端(模板消息)提醒
			// 模板名称：党课提醒
			String tmlShortId = "OPENTM407110104";
			String tmlId = templateApi.getTemplateId(wxApp, tmlShortId);
			// 点击模板消息的跳转页面 (URL置空，则在发送后，点击模板消息会进入一个空白页面（ios），或无法点击（android）)
			String url = DOMAIN+"/web/course.html?id="
					+ courseid;
			// 模板消息内容数组 {first，keyword1-5，remark}
			Template[] tmls = { new Template("first", "你好，你有一条上课通知"),
					new Template("keyword1", course.getName()),
					new Template("keyword2", course.getAddtimestr()),
					new Template("keyword3", course.getAddress()), 
					new Template("keyword4", ""),
					new Template("keyword5", "测试人"), 
					new Template("remark", "请认真学习!") };

			Member member = new Member();
			member.setWxappid(WXAPPID);
			List<Member> memberList = memberService.find(member, "");
			for (Member m : memberList) {
				templateApi.sendTemplateMsg(wxApp, m.getId(), tmlId, "#173177",
						url, tmls);
			}
			msg = oper + "课程(" + course.getName() + ")成功!";
		} catch (Exception e) {
			e.printStackTrace();
		}
		map.put("msg", msg);
		map.put("isCloseWindow", true);
		map.put("isRefresh", true);
		return "admin/msg";
	}

	/**
	 * 删除
	 * 
	 * @param map
	 * @return
	 */
	@RequestMapping("/del.do")
	public String del(String pageFuncId, String ids,
			HttpServletRequest request, ModelMap map,
			HttpServletResponse response) {
		if (ids != null && ids.trim().length() > 0) {
			String[] idArr = ids.split(";");
			if (idArr != null && idArr.length > 0) {
				Course course = null;
				for (int i = 0; i < idArr.length; i++) {
					if (idArr[i].trim().length() > 0) {
						try {
							course = courseService.getCourse(Integer
									.parseInt(idArr[i]));
							if (course != null) {
								courseService.delCourseById(course.getId());
								msg = "删除课程(" + course.getName() + ")成功!";
							}
						} catch (Exception e) {
							e.printStackTrace();
							msg = "删除课程(" + course.getName() + ")失败:"
									+ e.toString() + "!";
						}
						operlogService.log(getLoginName(), msg, request);
					}
				}
			}
		}
		map.put("msg", "操作成功");
		map.put("forwardUrl", "course/list.do?pageFuncId=" + pageFuncId);
		map.put("forwardSeconds", 3);
		return "admin/msg";
	}

	@RequestMapping("/complete.do")
	public String complete(Integer id, ModelMap map,
			HttpServletRequest request, HttpServletResponse response) {
		List<CourseInfo> infoList = courseService.findInfoList(id);
		map.put("list", infoList);
		return "course/course_infos";
	}

	/**
	 * 课程资料
	 * 
	 * @param map
	 * @return
	 */
	@RequestMapping("/infoList.do")
	public String infolist(Integer id, ModelMap map,
			HttpServletRequest request, HttpServletResponse response) {
		List<CourseInfo> infoList = courseService.findInfoList(id);
		map.put("list", infoList);
		return "course/course_infos";
	}

	/**
	 * 课程反馈
	 * 
	 * @param map
	 * @return
	 */
	@RequestMapping("/feedList.do")
	public String feedList(Integer id, ModelMap map,
			HttpServletRequest request, HttpServletResponse response) {
		List<CourseFeed> feedList = courseService.findFeedList(null, id);
		if (null != feedList && feedList.size() > 0) {
			for (CourseFeed guestbook : feedList) {
				List<CourseFeed> replyList = courseService
						.findByParid(guestbook.getId());
				guestbook.setReplyList(replyList);
			}
		}
		map.put("list", feedList);
		return "course/course_feeds";
	}

	/**
	 * 课程反馈
	 * 
	 * @param map
	 * @return
	 */
	@RequestMapping("/userList.do")
	public String userList(Integer id, ModelMap map,
			HttpServletRequest request, HttpServletResponse response) {
		Course course = courseService.getCourse(id);
		List<CourseFeed> feedList = courseService.findFeedList(
				course.getUnitid(), id);
		if (null != feedList && feedList.size() > 0) {
			for (CourseFeed guestbook : feedList) {
				List<CourseFeed> replyList = courseService
						.findByParid(guestbook.getId());
				guestbook.setReplyList(replyList);
			}
		}
		map.put("list", feedList);
		return "course/course_feeds";
	}
	
	/**
	 * 日期型数据转换，将页面上的表示日期限的字符串，转换为Date型
	 * **/
	@InitBinder
	public void initBinder(WebDataBinder binder) {
		SimpleDateFormat dateFormat = new SimpleDateFormat(
				"yyyy-MM-dd HH:mm:ss");
		dateFormat.setLenient(true);
		binder.registerCustomEditor(Date.class, new CustomDateEditor(
				dateFormat, true));

	}

}
