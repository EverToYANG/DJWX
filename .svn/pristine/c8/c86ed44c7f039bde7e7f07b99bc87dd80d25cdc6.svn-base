package com.gsccs.cms.controller.web;

import java.io.File;
import java.io.IOException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;
import java.util.UUID;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletResponse;

import org.springframework.beans.propertyeditors.CustomDateEditor;
import org.springframework.stereotype.Controller;
import org.springframework.ui.ModelMap;
import org.springframework.web.bind.WebDataBinder;
import org.springframework.web.bind.annotation.InitBinder;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartFile;

import com.gsccs.cms.bass.controller.MemberBaseController;
import com.gsccs.cms.bass.utils.FileUtil;
import com.gsccs.cms.bass.utils.FreeMarkerUtil;
import com.gsccs.cms.core.model.Site;
import com.gsccs.cms.core.service.SiteService;
import com.gsccs.cms.module.model.Resume;
import com.gsccs.cms.module.service.ResumeService;

import freemarker.template.TemplateModelException;

/**
 * 简历相关操作
 * 
 * @author x.d zhang
 * @version 1.0
 * 
 */
@Controller("WebResumeController")
@RequestMapping("/web")
public class WebResumeController extends MemberBaseController {

	@Resource
	private ResumeService resumeService;
	@Resource
	private SiteService siteService;

	/**
	 * 保存
	 * 
	 * @return
	 * @throws IOException
	 * @throws TemplateModelException
	 */
	@RequestMapping("/resumeSave.htm")
	public String resumeSave(
			Resume resume,
			String validatecode,
			@RequestParam(value = "imgfile", required = false) MultipartFile imgfile,
			@RequestParam(value = "attchfile", required = false) MultipartFile attchfile,
			String templetPath, ModelMap map, HttpServletResponse response) throws TemplateModelException, IOException {
		String msg = "";
		if (resume != null) {
			Site site = siteService.findById(resume.getSiteid());
			if (site != null && site.getTemplet() != null
					&& site.getTemplet().trim().length() > 0) {
				if (validatecode == null
						|| !validatecode.equals(session.getAttribute("rand"))) {
					msg = "验证码错误!";
				} else {
					boolean issave = true;
					resume.setAddtime(new Date());
					resume.setIp(request.getRemoteAddr());
					resume.setState("0");
					if (getLoginMember() != null) {
						resume.setMemberid(getLoginMember().getId());
						resume.setMembername(getLoginMemberName());
					}
					if (imgfile != null && imgfile.getSize() > 0) {
						// 生成目标文件
						String root = request.getRealPath("/");
						String ext = FileUtil.getExt(
								imgfile.getOriginalFilename()).toLowerCase();
						if (getConfigVal("imgType").indexOf(
								ext.replace(".", "")) < 0) {
							msg = "<script>alert('只能上传"
									+ getConfigVal("imgType")
									+ "格式的图片!');history.back();</script>";
							issave = false;
						} else {
							String id = UUID.randomUUID().toString();
							File targetFile = new File(root + "/upload/"
									+ site.getId() + "/" + id + ext);
							File folder = new File(root + "/upload/"
									+ site.getId() + "/");
							if (!folder.exists()) {
								folder.mkdirs();
							}
							if (!targetFile.exists()) {
								targetFile.createNewFile();
							}
							// 复制到目标文件
							FileUtil.copy(imgfile, targetFile);

							// 生成访问地址
							resume.setImg("/upload/" + site.getId() + "/" + id
									+ ext);
						}
					}
					if (attchfile != null && attchfile.getSize() > 0) {
						// 生成目标文件
						String root = request.getRealPath("/");
						String ext = FileUtil.getExt(
								attchfile.getOriginalFilename()).toLowerCase();
						if (getConfigVal("attchType").indexOf(
								ext.replace(".", "")) < 0) {
							msg = "<script>alert('只能上传"
									+ getConfigVal("attchType")
									+ "格式的附件!');history.back();</script>";
							issave = false;
						} else {
							String id = UUID.randomUUID().toString();
							File targetFile = new File(root + "/upload/"
									+ site.getId() + "/" + id + ext);
							File folder = new File(root + "/upload/"
									+ site.getId() + "/");
							if (!folder.exists()) {
								folder.mkdirs();
							}
							if (!targetFile.exists()) {
								targetFile.createNewFile();
							}
							// 复制到目标文件
							FileUtil.copy(attchfile, targetFile);

							// 生成访问地址
							resume.setAttch("/upload/" + site.getId() + "/"
									+ id + ext);
						}
					}
					if (issave) {
						resumeService.add(resume);
						msg = "感谢您的投递，我们会尽快回复！";
					}
				}
				// 生成静态页面
				Map<String, Object> data = new HashMap<String, Object>();
				//setData(data, site);
				data.put("msg", msg);
				templetPath = "templet/" + site.getTemplet().trim() + "/"
						+ templetPath;
				response.setCharacterEncoding("UTF-8");
				FreeMarkerUtil.createWriter(getApplication(), data,
						templetPath, response.getWriter());
			}
		}
		return null;
	}

	/**
	 * 日期型数据转换，将页面上的表示日期限的字符串，转换为Date型
	 * **/
	@InitBinder
	public void initBinder(WebDataBinder binder) {
		SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
		dateFormat.setLenient(true);
		binder.registerCustomEditor(Date.class, new CustomDateEditor(
				dateFormat, true));

	}
}
