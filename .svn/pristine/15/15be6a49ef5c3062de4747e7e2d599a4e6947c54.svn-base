package com.gsccs.cms.controller.web;

import java.util.Date;
import java.util.List;

import javax.annotation.Resource;
import javax.servlet.http.Cookie;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.commons.lang3.StringUtils;
import org.springframework.stereotype.Controller;
import org.springframework.ui.ModelMap;
import org.springframework.web.bind.annotation.RequestMapping;

import com.gsccs.cms.auth.model.Users;
import com.gsccs.cms.auth.service.UserService;
import com.gsccs.cms.auth.utils.AuthConst;
import com.gsccs.cms.bass.controller.BaseController;
import com.gsccs.cms.bass.utils.EscapeUnescape;
import com.gsccs.cms.bass.utils.ResponseUtil;
import com.gsccs.cms.core.model.Content;
import com.gsccs.cms.core.model.ContentSign;
import com.gsccs.cms.core.model.Site;
import com.gsccs.cms.core.model.Visit;
import com.gsccs.cms.core.service.ContentService;
import com.gsccs.cms.core.service.ContentSignService;
import com.gsccs.cms.core.service.SiteService;
import com.gsccs.cms.core.service.VisitService;

/**
 * 关于信息的相关操作
 * 
 * @author x.d zhang
 * @version 1.0
 * 
 */
@Controller("WebInfoController")
@RequestMapping("/web")
public class WebInfoController extends BaseController {
	
	@Resource
	private ContentService contentService;
	@Resource
	private SiteService siteService;
	@Resource
	private ContentSignService infoSignService;
	@Resource
	private UserService userService;
	@Resource
	private VisitService visitService;

	/**
	 * 预览
	 * 
	 * @param map
	 * @return
	 */
	@RequestMapping("/preview.html")
	public String infoPreview(String id, ModelMap map,
			HttpServletResponse response) {
		try {
			if (StringUtils.isNotEmpty(id)) {
				Content info = contentService.findById(id);
				if (info != null) {
					if (StringUtils.isNotEmpty(info.getUrl())) {
						response.sendRedirect(info.getUrl());
					} else {
						// 生成
						contentService.html(id, getApplication(),
								getContextPath(), request, getLoginName());
						Site site = siteService.findById(info.getSite());
						if (site != null) {
							response.sendRedirect("/"+site.getSourcepath() + "/"
									+ info.getPageurl());
						}
					}
				}
			}
		} catch (Exception e) {
			e.printStackTrace();
			msg = "预览信息失败:" + e.getMessage();
			map.put("msg", msg);
			return "msg";
		}
		return null;
	}

	/**
	 * 信息签收
	 * 
	 * @return
	 */
	@RequestMapping("/sign.htm")
	public String infoSign(String id, ModelMap map, HttpServletResponse response) {
		if (StringUtils.isNotEmpty(id)) {
			Content info = contentService.findById(id);
			if (info != null) {
				List<ContentSign> infosignList = infoSignService
						.findSignByInfo(info.getId());
				map.put("infosignList", infosignList);
			}
		}
		return "cms/infoSign";
	}

	/**
	 * 信息签收
	 * 
	 * @return
	 */
	@RequestMapping("/signDo.htm")
	public String infoSignDo(String id, Users user, ModelMap map,
			HttpServletResponse response) {

		// 记住用户名
		Cookie cookie = new Cookie("CMS_infosignLoginName",
				EscapeUnescape.escape(user.getLoginname()));
		cookie.setMaxAge(1000 * 60 * 60 * 24 * 365);// 有效时间为一年
		response.addCookie(cookie);
		// 记住密码
		Cookie cookiePwd = new Cookie("CMS_infosignPwd",
				EscapeUnescape.escape(user.getPwd()));
		cookiePwd.setMaxAge(1000 * 60 * 60 * 24 * 365);// 有效时间为一年
		response.addCookie(cookiePwd);
		if (StringUtils.isNotEmpty(id)) {
			Content info = contentService.findById(id);
			if (info != null) {
				// 判断用户信息是否正确
				String msg = userService.checkLogin(user);
				if (msg != null && msg.trim().length() > 0) {
					ResponseUtil.writeUTF(response, msg);
					return null;
				}
				user = (Users) session.getAttribute(AuthConst.CURRENT_USER);
				// 判断是否需要此用户签收
				ContentSign infoSign = infoSignService.findByUserInfo(
						user.getId(), info.getId());
				if (infoSign != null) {
					if (infoSign.getSigntime() != null) {
						ResponseUtil.writeUTF(response, "您已签收");
					} else {
						infoSign.setIp(request.getRemoteAddr());
						infoSign.setSigntime(new Date());
						infoSignService.update(infoSign);
						ResponseUtil.writeUTF(response, "操作成功" + user.getId());
					}
				} else {
					ResponseUtil.writeUTF(response, "您不能指定的签收用户");
				}
			}
		}
		return null;
	}

	/**
	 * ajax点击
	 * 
	 * @return
	 */
	@RequestMapping("/clickDo.htm")
	public String info_ajaxClick(String id, String siteid,ModelMap map,HttpServletRequest request,
			HttpServletResponse response) {
		int clicknum = 0;
		Visit visit = null;
		if (StringUtils.isNotEmpty(id)) {
			Content info = contentService.findClickById(id);
			if (info != null) {
				info.setClicknum((info.getClicknum() != null ? info
						.getClicknum() : 0) + 1);
				visit = new Visit();
				visit.setSiteid(info.getSite());
				visit.setChannelid(info.getChannel());
				visit.setInfoid(info.getId());
				if (!"1".equals(info.getIshot())
						&& StringUtils.isNotEmpty(getConfigVal("infoHotNum"))) {
					try {
						// 如果点击大于信息热点配置则设置为热点
						if (info.getClicknum() > Integer.parseInt(getConfigVal(
								"infoHotNum").trim())) {
							info.setIshot("1");
						}
					} catch (Exception e) {
					}
				}
				contentService.click(info);
				clicknum = info.getClicknum();
			}
		}else{
			visit = new Visit();
			if (StringUtils.isNotEmpty(siteid)) {
				visit.setSiteid(siteid);
			}
			clicknum = visitService.count(visit, true);
		}
		
		if (visit != null) {
			// 添加访问记录
			visit.setAddtime(new Date());
			visit.setIp(request.getRemoteAddr());
			visitService.add(visit);
		}
		
		ResponseUtil.writeUTF(response, "" + clicknum);
		return null;
	}

}
