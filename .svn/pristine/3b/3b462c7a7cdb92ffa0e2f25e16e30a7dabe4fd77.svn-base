package com.gsccs.cms.core.service.impl;

import java.io.File;
import java.io.IOException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.UUID;

import javax.annotation.Resource;
import javax.servlet.ServletContext;
import javax.servlet.http.HttpServletRequest;

import org.apache.commons.lang3.StringUtils;
import org.apache.solr.client.solrj.SolrQuery;
import org.apache.solr.client.solrj.SolrQuery.ORDER;
import org.apache.solr.client.solrj.SolrServerException;
import org.apache.solr.client.solrj.impl.HttpSolrServer;
import org.apache.solr.client.solrj.response.QueryResponse;
import org.apache.solr.common.SolrDocument;
import org.apache.solr.common.SolrDocumentList;
import org.springframework.stereotype.Service;

import com.gsccs.cms.auth.model.Config;
import com.gsccs.cms.auth.service.ConfigService;
import com.gsccs.cms.auth.service.OperlogService;
import com.gsccs.cms.bass.utils.FreeMarkerUtil;
import com.gsccs.cms.bass.utils.SqlUtil;
import com.gsccs.cms.core.dao.ContentMapper;
import com.gsccs.cms.core.model.Channel;
import com.gsccs.cms.core.model.Content;
import com.gsccs.cms.core.model.ContentExample;
import com.gsccs.cms.core.model.Site;
import com.gsccs.cms.core.model.ContentExample.Criteria;
import com.gsccs.cms.core.service.ChannelService;
import com.gsccs.cms.core.service.ContentService;
import com.gsccs.cms.core.service.SiteService;
import com.gsccs.cms.core.util.CmsConst;
import com.gsccs.cms.search.SolrServer;
import com.gsccs.cms.search.service.IndexService;

import freemarker.template.TemplateException;

/**
 * 网站内容相关服务
 * 
 * @author x.d zhang
 * @version 1.0
 * 
 */
@Service("contentService")
public class ContentServiceImpl implements ContentService {

	@Resource
	private ContentMapper contentMapper;
	@Resource
	private ChannelService channelService;
	@Resource
	private SiteService siteService;
	@Resource
	private OperlogService operlogService;
	@Resource
	private ConfigService configService;
	@Resource
	private IndexService indexService;

	/**
	 * 生成信息页
	 * 
	 * @param id
	 * @throws TemplateException
	 * @throws IOException
	 * @throws TemplateException
	 * @throws IOException
	 */
	public void html(String id, ServletContext context, String contextPath,
			HttpServletRequest request, String operuser) throws IOException,
			TemplateException {
		// 查询信息
		Content info = findById(id);

		// 查询出site 根据site是否需要一个
		// && null != info.getAuditState() && info.getAuditState().equals("1")
		if (info != null) {
			Channel channel = channelService.findById(info.getChannel());
			String templet = "info.html";
			// 判断info是否有信息页模板
			if (info.getTemplet() != null
					&& info.getTemplet().trim().length() > 0) {
				templet = info.getTemplet();
			} else if (channel != null && channel.getContenttemplet() != null
					&& channel.getContenttemplet().trim().length() > 0) {
				templet = channel.getContenttemplet();
			}
			Site site = siteService.findById(info.getSite());
			if (site != null && site.getTemplet() != null
					&& site.getTemplet().trim().length() > 0) {
				// 生成静态页面
				Map<String, Object> data = new HashMap<String, Object>();
				// 传递site参数
				data.put("site", site);
				channel.setSitepath(contextPath + "/" + site.getSourcepath()
						+ "/");
				data.put("currChannel", channel);
				data.put("currInfo", info);
				data.put("contextPath", contextPath);
				data.put("contextPathNo", request.getContextPath());
				// 生成目录
				// 信息页面URL构成:domain.com/yyyy/MM/dd/indexNum.html
				// 方网站页面按日期维护及数据备份
				Date addtime = info.getAddtime();
				String addtimeStr = "";
				if (addtime != null) {
					addtimeStr = new SimpleDateFormat("yyyy/MM/dd")
							.format(addtime);
				}

				Config sitePathConfig = configService
						.findByCode(CmsConst.SITE_ROOT_PATH_CODE);
				String rootPath = sitePathConfig.getCode();
				String sitePath = rootPath + "/" + site.getSourcepath()
						+ File.separator;

				//
				String htmlfile = sitePath + addtimeStr + "/"
						+ info.getHtmlIndexnum() + ".html";
				File folder = new File(sitePath);
				if (!folder.exists()) {
					folder.mkdirs();
				}
				String filePath = sitePath + "templet" + File.separator
						+ site.getTemplet().trim() + File.separator;
				File dir = new File(filePath);

				FreeMarkerUtil.createHTML(dir, data, templet, htmlfile);

				operlogService.log(operuser, "信息页静态化:" + info.getTitle(),
						request);
			}
		}
	}

	/**
	 * 删除信息页
	 * 
	 * @param id
	 * @throws TemplateException
	 * @throws IOException
	 */
	public void delhtml(String id, HttpServletRequest request) {
		// 查询信息
		Content info = findById(id);
		if (info != null) {
			Site site = siteService.findById(info.getSite());
			channelService.findById(info.getChannel());
			if (site != null) {
				// 删除静态文件
				Config sitePathConfig = configService
						.findByCode(CmsConst.SITE_ROOT_PATH_CODE);
				String rootPath = sitePathConfig.getCode();
				String sitePath = rootPath + "/" + site.getSourcepath() + "/";

				Date addtime = info.getAddtime();
				String addtimeStr = "";
				if (addtime != null) {
					addtimeStr = new SimpleDateFormat("yyyy/MM/dd")
							.format(addtime);
				}
				String htmlfile = sitePath + addtimeStr + "/"
						+ info.getHtmlIndexnum() + ".html";
				File file = new File(htmlfile);
				if (file.exists()) {
					file.delete();
				}
			}
		}
	}

	/**
	 * 分页查询
	 * 
	 * @param info
	 * @param order
	 * @param currPage
	 * @param pageSize
	 * @param loginAdmin
	 * @return
	 */
	public List<Content> find(Content info, String order, int currPage,
			int pageSize) {
		ContentExample example = new ContentExample();
		Criteria criteria = example.createCriteria();
		proSearchParam(info, criteria);
		if (order != null && order.trim().length() > 0) {
			example.setOrderByClause(order);
		}
		example.setCurrPage(currPage);
		example.setPageSize(pageSize);
		return contentMapper.selectPageByExample(example);
	}

	/**
	 * 查询所有
	 * 
	 * @param info
	 * @param order
	 * @return
	 */
	public List<Content> findAll(Content info, String order) {
		ContentExample example = new ContentExample();
		Criteria criteria = example.createCriteria();
		proSearchParam(info, criteria);
		if (order != null && order.trim().length() > 0) {
			example.setOrderByClause(order);
		}
		return contentMapper.selectByExample(example);
	}

	/**
	 * 统计
	 * 
	 * @param info
	 * @return
	 */
	public int count(Content info) {
		ContentExample example = new ContentExample();
		Criteria criteria = example.createCriteria();
		proSearchParam(info, criteria);
		return contentMapper.countByExample(example);
	}

	/**
	 * 处理查询条件
	 * 
	 * @param info
	 * @param criteria
	 */
	public void proSearchParam(Content info, Criteria criteria) {
		if (info != null) {
			info.setSearchKey(SqlUtil.replace(info.getSearchKey()));
			if (info.getSearchKey() != null
					&& info.getSearchKey().trim().length() > 0) {
				criteria.andSql("(title like '%" + info.getSearchKey().trim()
						+ "%' or shortTitle like '%"
						+ info.getSearchKey().trim()
						+ "%' or i.description like '%"
						+ info.getSearchKey().trim() + "%' or tags like '%"
						+ info.getSearchKey().trim() + "%' )");
			}
			info.setTags(SqlUtil.replace(info.getTags()));
			if (StringUtils.isNotEmpty(info.getTags())) {
				String[] tags = info.getTags().split(",");
				if (tags != null && tags.length > 0) {
					StringBuilder sb = new StringBuilder();
					for (int i = 0; i < tags.length; i++) {
						if (tags[i].trim().length() > 0) {
							if (sb.toString().length() > 0) {
								sb.append(" or ");
							}
							sb.append(" title like '%" + tags[i].trim()
									+ "%' or shortTitle like '%"
									+ tags[i].trim()
									+ "%' or i.description like '%"
									+ tags[i].trim() + "%' or tags like '%"
									+ tags[i].trim() + "%' ");
						}
					}
					criteria.andSql("(" + sb.toString() + ")");
				}
			}
			if (info.getId() != null && info.getId().trim().length() > 0) {
				criteria.andInfoIdEqualTo(info.getId());
			}
			if (info.getSite() != null && info.getSite().trim().length() > 0) {
				criteria.andInfoSiteEqualTo(info.getSite());
			}
			if ("1".equals(info.getCheckOpenendtime())) {
				SimpleDateFormat sdf = new SimpleDateFormat(
						"yyyy-MM-dd HH:mm:ss");
				criteria.andSql(" (openendtime is null or openendtime = '' or opentimetype='1' or openendtime>='"
						+ sdf.format(new Date()) + "') ");
			}
			if (info.getChannel() != null
					&& info.getChannel().trim().length() > 0) {
				criteria.andChannelEqualTo(info.getChannel());
			}
			if (info.getChannelids() != null && info.getChannelids().size() > 0) {
				criteria.andChannelIn(info.getChannelids());
			}
			info.setChannelParid(SqlUtil.replace(info.getChannelParid()));
			if (info.getChannelParid() != null
					&& info.getChannelParid().trim().length() > 0) {
				criteria.andSql(" i.channel in (select id from cms_channel where parid ='"
						+ info.getChannelParid().trim() + "') ");
			}
			info.setChannelParPagemark(SqlUtil.replace(info
					.getChannelParPagemark()));
			if (info.getChannelParPagemark() != null
					&& info.getChannelParPagemark().trim().length() > 0) {
				criteria.andSql(" i.channel in (select id from cms_channel where parid in (select id from cms_channel where site='"
						+ info.getSite()
						+ "' and pagemark='"
						+ info.getChannelParPagemark().trim() + "')) ");
			}
			info.setChannelname(SqlUtil.replace(info.getChannelname()));
			if (info.getChannelname() != null
					&& info.getChannelname().trim().length() > 0) {
				criteria.andSql(" c.name like '%"
						+ info.getChannelname().trim() + "%' ");
			}
			if (info.getAdduser() != null
					&& info.getAdduser().trim().length() > 0) {
				criteria.andAdduserEqualTo(info.getAdduser());
			}
			info.setAdduserLike(SqlUtil.replace(info.getAdduserLike()));
			if (info.getAdduserLike() != null
					&& info.getAdduserLike().trim().length() > 0) {
				criteria.andSql(" (u.loginname like '%"
						+ info.getAdduserLike().trim() + "%' or u.name like '%"
						+ info.getAdduserLike().trim() + "%') ");
			}
			info.setSitename(SqlUtil.replace(info.getSitename()));
			if (info.getSitename() != null
					&& info.getSitename().trim().length() > 0) {
				criteria.andSql(" (s.name like '%" + info.getSitename().trim()
						+ "%') ");
			}
			info.setInfosite(SqlUtil.replace(info.getInfosite()));
			if (info.getInfosite() != null
					&& info.getInfosite().trim().length() > 0) {
				criteria.andSql(" (i.site ='" + info.getInfosite().trim()
						+ "') ");
			}
			info.setTitle(SqlUtil.replace(info.getTitle()));
			if (info.getTitle() != null && info.getTitle().trim().length() > 0) {
				criteria.andTitleLike("%" + info.getTitle().trim() + "%");
			}
			if (info.getIstop() != null && info.getIstop().trim().length() > 0) {
				criteria.andIstopEqualTo(info.getIstop());
			}
			if (info.getIssign() != null
					&& info.getIssign().trim().length() > 0) {
				criteria.andIssignEqualTo(info.getIssign());
			}

			if (info.getAuditState() != null
					&& info.getAuditState().trim().length() > 0) {
				criteria.andAuditStateEqualTo(info.getAuditState());

			}
			if (info.getIscomment() != null
					&& info.getIscomment().trim().length() > 0) {
				criteria.andIscommentEqualTo(info.getIscomment());
			}
			if (info.getTopendtime() != null) {
				SimpleDateFormat sdf = new SimpleDateFormat(
						"yyyy-MM-dd HH:mm:ss");
				criteria.andSql(" (topendtime>='"
						+ sdf.format(info.getTopendtime())
						+ "' or topendtime is null) ");
			}
			if (info.getNoids() != null && info.getNoids().trim().length() > 0) {
				String[] ids = info.getNoids().split(",");
				List<String> idList = new ArrayList<String>();
				if (ids != null && ids.length > 0) {
					for (int i = 0; i < ids.length; i++) {
						idList.add(ids[i]);
					}
				}
				criteria.andInfoIdNotIn(idList);
			}
			if (info.getChannels() != null && info.getChannels().length > 0) {
				List<String> idList = new ArrayList<String>();
				for (int i = 0; i < info.getChannels().length; i++) {
					idList.add(info.getChannels()[i]);
				}
				criteria.andChannelIn(idList);
			}
			info.setChannelPagemark(SqlUtil.replace(info.getChannelPagemark()));
			if (info.getChannelPagemark() != null
					&& info.getChannelPagemark().trim().length() > 0) {
				criteria.andSql(" (channel in (select id from cms_channel where site='"
						+ info.getSite()
						+ "' and pagemark='"
						+ info.getChannelPagemark() + "')) ");
			}
			if (info.getIncludePagemark() != null
					&& info.getIncludePagemark().trim().length() > 0) {
				criteria.andSql("(channel in (select id from cms_channel where site='"
						+ info.getSite()
						+ "' and pagemark in("
						+ info.getIncludePagemark() + ")))");
			}
			if (info.getImg() != null && info.getImg().trim().length() > 0) {
				criteria.andSql(" (i.img is not null and i.img !='') ");
			}
			if (info.getStarttime() != null) {
				criteria.andAddtimeGreaterThanOrEqualTo(info.getStarttime());
			}
			if (info.getEndtime() != null) {
				criteria.andAddtimeLessThanOrEqualTo(info.getEndtime());
			}
			if (info.getInfostarttime() != null) {
				criteria.andInfoAddtimeGreaterThanOrEqualTo(info
						.getInfostarttime());
			}
			if (info.getInfoendtime() != null) {
				criteria.andInfoAddtimeLessThanOrEqualTo(info.getInfoendtime());
			}
			if (info.getInfostarttimeNoeq() != null) {
				criteria.andInfoAddtimeGreaterThan(info.getInfostarttimeNoeq());
			}
			if (info.getInfoendtimeNoeq() != null) {
				criteria.andInfoAddtimeLessThan(info.getInfoendtimeNoeq());
			}
			if (info.getInfoStartClicknum() > 0) {
				criteria.andInfoClicknumGreaterThan(info.getInfoStartClicknum());
			}
			if (info.getInfoEndClicknum() > 0) {
				criteria.andInfoClicknumLessThan(info.getInfoEndClicknum());
			}
			if (info.getInfoendtime() != null) {
				criteria.andInfoAddtimeLessThanOrEqualTo(info.getInfoendtime());
			}
			if (null != info.getHtmlIndexnum() && info.getHtmlIndexnum() > 0) {
				criteria.andHtmlIndexnumEqualTo(info.getHtmlIndexnum());
			}
			if (StringUtils.isNotEmpty(info.getHtmlIndexnumLike())) {
				criteria.andHtmlIndexnumLike("%"
						+ info.getHtmlIndexnumLike().trim() + "%");
			}
		}
	}

	/**
	 * 添加
	 * 
	 * @param info
	 * @return
	 */
	public String insert(Content content) {
		String id = "";
		if (content != null) {
			id = UUID.randomUUID().toString();
			content.setId(id);
			contentMapper.insert(content);
			indexService.writeDoc(content);
		}
		return id;
	}

	/**
	 * 更新
	 * 
	 * @param info
	 */
	public void update(Content content) {
		contentMapper.updateByPrimaryKeyWithBLOBs(content);
		indexService.writeDoc(content);
	}

	/**
	 * 点击
	 * 
	 * @param info
	 * @return
	 */
	public void click(Content info) {
		contentMapper.click(info);
	}

	/**
	 * 根据id查询
	 * 
	 * @param id
	 * @return
	 */
	public Content findById(String id) {
		return contentMapper.selectByPrimaryKey(id);
	}

	/**
	 * 根据indexnum查询
	 * 
	 * @param id
	 * @return
	 */
	public Content findByIndexnum(int indexnum) {
		Content info = new Content();
		info.setHtmlIndexnum(indexnum);
		List<Content> infoList = findAll(info, "");
		if (infoList != null && infoList.size() > 0) {
			return infoList.get(0);
		}
		return null;
	}

	/**
	 * 根据id查询
	 * 
	 * @param id
	 * @return
	 */
	public Content findClickById(String id) {
		return contentMapper.selectClickByPrimaryKey(id);
	}

	public void del(String id) {
		contentMapper.deleteByPrimaryKey(id);
	}

	/**
	 * 工作量统计
	 * 
	 * @param info
	 * @return
	 */
	public List<Content> workload(Content info, int currPage, int pageSize) {
		ContentExample example = new ContentExample();
		Criteria criteria = example.createCriteria();
		proSearchParam(info, criteria);
		example.setCurrPage(currPage);
		example.setPageSize(pageSize);
		return contentMapper.workloadPage(example);
	}

	/**
	 * 工作量统计
	 * 
	 * @param info
	 * @return
	 */
	public List<Content> workload(Content info) {
		ContentExample example = new ContentExample();
		Criteria criteria = example.createCriteria();
		proSearchParam(info, criteria);
		return contentMapper.workload(example);
	}

	/**
	 * 工作量统计
	 * 
	 * @param info
	 * @return
	 */
	public int workloadCount(Content info) {
		ContentExample example = new ContentExample();
		Criteria criteria = example.createCriteria();
		proSearchParam(info, criteria);
		return contentMapper.workloadCount(example);
	}

	/**
	 * 工作量合计
	 * 
	 * @param info
	 * @return
	 */
	public int workloadSum(Content info) {
		ContentExample example = new ContentExample();
		Criteria criteria = example.createCriteria();
		proSearchParam(info, criteria);
		return contentMapper.workloadSum(example);
	}

	/**
	 * 站点内容统计
	 * 
	 * @param info
	 * @return
	 */
	public List<Content> siteStat(Content info, int currPage, int pageSize) {
		ContentExample example = new ContentExample();
		Criteria criteria = example.createCriteria();
		proSearchParam(info, criteria);
		example.setCurrPage(currPage);
		example.setPageSize(pageSize);
		return contentMapper.siteStatPage(example);
	}

	/**
	 * 站点内容统计
	 * 
	 * @param info
	 * @return
	 */
	public List<Content> siteStat(Content info) {
		ContentExample example = new ContentExample();
		Criteria criteria = example.createCriteria();
		proSearchParam(info, criteria);
		return contentMapper.siteStat(example);
	}

	/**
	 * 站点内容统计
	 * 
	 * @param info
	 * @return
	 */
	public int siteStatCount(Content info) {
		ContentExample example = new ContentExample();
		Criteria criteria = example.createCriteria();
		proSearchParam(info, criteria);
		return contentMapper.siteStatCount(example);
	}

	/**
	 * 站点内容合计
	 * 
	 * @param info
	 * @return
	 */
	public int siteStatSum(Content info) {
		ContentExample example = new ContentExample();
		Criteria criteria = example.createCriteria();
		proSearchParam(info, criteria);
		return contentMapper.siteStatSum(example);
	}

	/**
	 * 栏目信息统计
	 * 
	 * @param info
	 * @return
	 */
	public List<Content> channelStat(Content info) {
		ContentExample example = new ContentExample();
		Criteria criteria = example.createCriteria();
		proSearchParam(info, criteria);
		return contentMapper.channelStat(example);
	}

	/**
	 * 栏目信息统计
	 * 
	 * @param info
	 * @return
	 */
	public int channelStatCount(Content info) {
		ContentExample example = new ContentExample();
		Criteria criteria = example.createCriteria();
		proSearchParam(info, criteria);
		return contentMapper.channelStatCount(example);
	}

	/**
	 * 栏目信息合计
	 * 
	 * @param info
	 * @return
	 */
	public int channelStatSum(Content info) {
		ContentExample example = new ContentExample();
		Criteria criteria = example.createCriteria();
		proSearchParam(info, criteria);
		return contentMapper.channelStatSum(example);
	}

	/**
	 * 信息更新统计 年
	 * 
	 * @param info
	 * @return
	 */
	public List<Content> infoUpdateYear(Content info) {
		ContentExample example = new ContentExample();
		Criteria criteria = example.createCriteria();
		proSearchParam(info, criteria);
		return contentMapper.infoUpdateYear(example);
	}

	/**
	 * 信息更新统计 年
	 * 
	 * @param info
	 * @return
	 */
	public List<Content> infoUpdateYear(Content info, int currPage, int pageSize) {
		ContentExample example = new ContentExample();
		Criteria criteria = example.createCriteria();
		proSearchParam(info, criteria);
		example.setCurrPage(currPage);
		example.setPageSize(pageSize);
		return contentMapper.infoUpdateYearPage(example);
	}

	/**
	 * 信息更新统计 年
	 * 
	 * @param info
	 * @return
	 */
	public int infoUpdateYearCount(Content info) {
		ContentExample example = new ContentExample();
		Criteria criteria = example.createCriteria();
		proSearchParam(info, criteria);
		return contentMapper.infoUpdateYearCount(example);
	}

	/**
	 * 信息更新合计 年
	 * 
	 * @param info
	 * @return
	 */
	public int infoUpdateYearSum(Content info) {
		ContentExample example = new ContentExample();
		Criteria criteria = example.createCriteria();
		proSearchParam(info, criteria);
		return contentMapper.infoUpdateYearSum(example);
	}

	/**
	 * 信息更新统计 月
	 * 
	 * @param info
	 * @return
	 */
	public List<Content> infoUpdateMonth(Content info) {
		ContentExample example = new ContentExample();
		Criteria criteria = example.createCriteria();
		proSearchParam(info, criteria);
		return contentMapper.infoUpdateMonth(example);
	}

	/**
	 * 信息更新统计 月
	 * 
	 * @param info
	 * @return
	 */
	public List<Content> infoUpdateMonth(Content info, int currPage,
			int pageSize) {
		ContentExample example = new ContentExample();
		Criteria criteria = example.createCriteria();
		proSearchParam(info, criteria);
		example.setCurrPage(currPage);
		example.setPageSize(pageSize);
		return contentMapper.infoUpdateMonthPage(example);
	}

	/**
	 * 信息更新统计 月
	 * 
	 * @param info
	 * @return
	 */
	public int infoUpdateMonthCount(Content info) {
		ContentExample example = new ContentExample();
		Criteria criteria = example.createCriteria();
		proSearchParam(info, criteria);
		return contentMapper.infoUpdateMonthCount(example);
	}

	/**
	 * 信息更新合计 月
	 * 
	 * @param info
	 * @return
	 */
	public int infoUpdateMonthSum(Content info) {
		ContentExample example = new ContentExample();
		Criteria criteria = example.createCriteria();
		proSearchParam(info, criteria);
		return contentMapper.infoUpdateMonthSum(example);
	}

	/**
	 * 信息更新统计 日
	 * 
	 * @param info
	 * @return
	 */
	public List<Content> infoUpdateDay(Content info) {
		ContentExample example = new ContentExample();
		Criteria criteria = example.createCriteria();
		proSearchParam(info, criteria);
		return contentMapper.infoUpdateDay(example);
	}

	/**
	 * 信息更新统计 日
	 * 
	 * @param info
	 * @return
	 */
	public List<Content> infoUpdateDay(Content info, int currPage, int pageSize) {
		ContentExample example = new ContentExample();
		Criteria criteria = example.createCriteria();
		proSearchParam(info, criteria);
		example.setCurrPage(currPage);
		example.setPageSize(pageSize);
		return contentMapper.infoUpdateDayPage(example);
	}

	/**
	 * 信息更新统计 日
	 * 
	 * @param info
	 * @return
	 */
	public int infoUpdateDayCount(Content info) {
		ContentExample example = new ContentExample();
		Criteria criteria = example.createCriteria();
		proSearchParam(info, criteria);
		return contentMapper.infoUpdateDayCount(example);
	}

	/**
	 * 信息更新合计 日
	 * 
	 * @param info
	 * @return
	 */
	public int infoUpdateDaySum(Content info) {
		ContentExample example = new ContentExample();
		Criteria criteria = example.createCriteria();
		proSearchParam(info, criteria);
		return contentMapper.infoUpdateDaySum(example);
	}

	/**
	 * 信息更新合计 周
	 * 
	 * @param info
	 * @return
	 */
	public int infoUpdateWeekSum(Content info) {
		ContentExample example = new ContentExample();
		Criteria criteria = example.createCriteria();
		proSearchParam(info, criteria);
		return contentMapper.infoUpdateWeekSum(example);
	}

	/**
	 * 信息更新统计 周
	 * 
	 * @param info
	 * @return
	 */
	public List<Content> infoUpdateWeek(Content info) {
		ContentExample example = new ContentExample();
		Criteria criteria = example.createCriteria();
		proSearchParam(info, criteria);
		return contentMapper.infoUpdateWeek(example);
	}

	/**
	 * 高级搜索 查询参数：（站点、栏目、时间、关键词）
	 */
	@Override
	public List<Content> allQuery(Content content, String order, int currPage,
			int pageSize) {
		List<Content> contentList = new ArrayList<Content>();
		HttpSolrServer solrServer = null;
		Config solrUrlConf = configService
				.findByCode(CmsConst.SOLR_SERVER_PATH);
		if (null != solrUrlConf) {
			String solrUrl = solrUrlConf.getCode();
			solrServer = SolrServer.getInstance().getServer(solrUrl);
		} else {
			return contentList;
		}

		SolrQuery sQuery = new SolrQuery();

		if (null != content) {
			String site = content.getSite();
			String channel = content.getChannel();
			String key = content.getSearchKey();
			if (null != site && site.trim().length() > 0) {
				sQuery.set("site", site);
			}
			if (null != channel && channel.trim().length() > 0) {
				sQuery.set("channel", channel);
			}
			if (null != key && key.trim().length() > 0) {
				sQuery.set("title", key);
				sQuery.set("showtitle", key);
				sQuery.set("description", key);
				sQuery.set("content", key);
			}
		}
		if (null != order && order.trim().length() > 0) {
			// 排序
			sQuery.addSort(order, ORDER.asc);
		}

		// 设置分页
		sQuery.setStart(currPage);
		sQuery.setRows(pageSize);
		QueryResponse response;
		try {
			response = solrServer.query(sQuery);
			SolrDocumentList list = response.getResults();
			if (null != list && list.size() > 0) {
				Content content_ = null;
				for (SolrDocument doc : list) {
					content_ = new Content();
					content_.setId(doc.getFieldValue("id").toString());
					content_.setTitle(doc.getFieldValue("title").toString());
					contentList.add(content_);
				}
			}
		} catch (SolrServerException e) {
			e.printStackTrace();
		}
		return contentList;
	}

	@Override
	public void addInfoIndex(List<Content> infoList) {
		// TODO Auto-generated method stub

	}

	@Override
	public void delteInfoIndex() {
		// TODO Auto-generated method stub

	}

}
