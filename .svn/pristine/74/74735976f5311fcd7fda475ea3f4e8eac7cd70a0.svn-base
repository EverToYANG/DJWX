package com.gsccs.cms.bass.controller;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.annotation.Resource;
import javax.servlet.ServletContext;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;

import com.gsccs.cms.auth.model.Config;
import com.gsccs.cms.auth.service.ConfigService;
import com.gsccs.cms.auth.service.OperlogService;
import com.gsccs.cms.auth.service.RoleService;
import com.gsccs.cms.auth.service.UnitService;
import com.gsccs.cms.bass.utils.SysUtil;
import com.gsccs.cms.member.model.Member;
import com.gsccs.cms.member.model.Membergroup;

/**
 * 控制器父类
 * 
 * @author x.d zhang
 * @version 1.0
 * 
 */
public class MemberBaseController {

	@Resource
	protected HttpServletRequest request;
	@Resource
	protected HttpSession session;
	@Resource
	protected ConfigService configService;
	@Resource
	protected OperlogService operlogService;

	/**
	 * 获取session中的当前登录会员
	 * 
	 * @return
	 */
	public Member getLoginMember() {
		if (session.getAttribute("loginMember") != null) {
			return (Member) session.getAttribute("loginMember");
		}
		return null;
	}

	/**
	 * 获取session中的当前登录会员组
	 * 
	 * @return
	 */
	public Membergroup getLoginMembergroup() {
		if (session.getAttribute("loginMembergroup") != null) {
			return (Membergroup) session.getAttribute("loginMembergroup");
		}
		return null;
	}

	/**
	 * 获取session中的当前会员登录用户名
	 * 
	 * @return
	 */
	public String getLoginMemberName() {
		if (getLoginMember() != null) {
			return getLoginMember().getLoginname();
		}
		return "";
	}

	/**
	 * 获取配置
	 * 
	 * @return
	 */
	public Map<String, Object> getConfig() {
		if (getApplication().getAttribute("config") != null) {
			return (Map<String, Object>) getApplication()
					.getAttribute("config");
		} else {
			// 重新生成
			return setConfig();
		}
	}

	/**
	 * 获取配置值
	 * 
	 * @return
	 */
	public String getConfigVal(String name) {
		Map<String, Object> config = getConfig();
		if (config != null && config.get(name) != null) {
			return config.get(name).toString();
		}
		return "";
	}

	/**
	 * 设置配置
	 * 
	 * @return
	 */
	public Map<String, Object> setConfig() {
		List<Config> configList = configService.find();
		Map<String, Object> config = new HashMap<String, Object>();
		if (configList != null && configList.size() > 0) {
			for (int i = 0; i < configList.size(); i++) {
				config.put(configList.get(i).getCode(), configList.get(i)
						.getConfigvalue());
			}
		}
		getApplication().setAttribute("config", config);
		return config;
	}

	public ServletContext getApplication() {
		return SysUtil.wac.getServletContext();
	}

}
