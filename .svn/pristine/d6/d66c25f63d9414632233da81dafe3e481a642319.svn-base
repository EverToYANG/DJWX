package com.gsccs.cms.controller.web;

import java.io.File;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletResponse;

import me.chanjar.weixin.common.api.WxConsts;
import me.chanjar.weixin.common.exception.WxErrorException;
import me.chanjar.weixin.mp.api.WxMpConfigStorage;
import me.chanjar.weixin.mp.api.WxMpService;
import me.chanjar.weixin.mp.api.impl.WxMpServiceImpl;

import org.apache.commons.lang3.StringUtils;
import org.apache.http.HttpEntity;
import org.apache.http.client.methods.CloseableHttpResponse;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.impl.client.CloseableHttpClient;
import org.apache.http.impl.client.HttpClients;
import org.apache.http.util.EntityUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.ModelMap;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.multipart.MultipartFile;

import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONObject;
import com.gsccs.cms.bass.controller.CmsBaseController;
import com.gsccs.cms.bass.utils.FileUtil;
import com.gsccs.cms.bass.utils.OssConfig;
import com.gsccs.cms.core.model.Site;
import com.gsccs.cms.core.service.ChannelService;
import com.gsccs.cms.member.model.Member;
import com.gsccs.cms.member.service.CreditruleService;
import com.gsccs.cms.member.service.MemberService;
import com.gsccs.cms.module.model.Guestbook;
import com.gsccs.cms.module.service.GuestBookService;
import com.gsccs.cms.weixin.model.WxApp;
import com.gsccs.cms.weixin.service.WxAppService;
import com.gsccs.cms.wx.service.MpMsgService;

/**
 * O2O控制类
 * 
 * 留言相关操作
 * 
 * @author x.d zhang
 * @version 1.0
 */
@Controller("WebGuestbookController")
@RequestMapping("/web/{appid}")
public class WebGuestbookController extends CmsBaseController {
	
	//模板消息短id
	private String tmlShortId = "OPENTM406851402";

	@Resource
	private GuestBookService guestbookService;
	@Resource
	private CreditruleService creditruleService;
	@Resource
	private ChannelService channelService;
	@Resource
	private MpMsgService mpMsgService;
	@Resource
	private MemberService memberService;
	@Autowired
	private WxAppService wxAppService;
	@Autowired
	private WxMpConfigStorage wxMpConfigStorage;

	/**
	 * 咨询列表
	 * 
	 * @return
	 */
	@RequestMapping("/gbList.html")
	public String guestbookList(@RequestParam(defaultValue = "1") int page,
			@RequestParam(defaultValue = "500") int pagesize,
			@RequestParam(defaultValue = "") String code,
			@RequestParam(defaultValue = "") String openid, ModelMap map,
			HttpServletResponse response) {
		Guestbook param = new Guestbook();
		List<Guestbook> guestbookList = guestbookService.find(param,
				"addtime desc", page, pagesize, true);
		if (null != guestbookList && guestbookList.size() > 0) {
			for (Guestbook guestbook : guestbookList) {
				List<Guestbook> replyList = guestbookService.findByParid(
						guestbook.getId(), true);
				guestbook.setReplyList(replyList);
			}
		}
		map.put("guestbookList", guestbookList);
		return "web/guestbook";
	}

	/**
	 * 跳转发布页面
	 * 
	 * @return
	 */
	@RequestMapping("/gbAdd.html")
	public String publish(@PathVariable("appid") String appid,
			@RequestParam(defaultValue = "") String code,
			@RequestParam(defaultValue = "") String openid, ModelMap map,
			HttpServletResponse response) {
		Member member = null;
		Site site = null;
		try {
			site = siteService.findById(appid);
			if (StringUtils.isEmpty(openid)) {
				wxMpConfigStorage.init(appid);
				WxMpService wxMpService = new WxMpServiceImpl();
				wxMpService.setWxMpConfigStorage(wxMpConfigStorage);

				if (StringUtils.isEmpty(code)) {
					String redirectURI = site.getSitedomain()
							+ "/web/gbAdd.html";
					String authurl = wxMpService.oauth2buildAuthorizationUrl(
							redirectURI, WxConsts.OAUTH2_SCOPE_BASE, null);
					return "redirect:" + authurl;
				} else {
					openid = wxMpService.oauth2getAccessToken(code).getOpenId();
				}
			}
			member = memberService.findById(openid);
		} catch (WxErrorException e) {
			e.printStackTrace();
		}
		map.put("member", member);
		map.put("site", site);
		return "web/publish";
	}

	/**
	 * 跳转查询页面
	 * 
	 * @return
	 */
	@RequestMapping("/gbQuery.html")
	public String query() {
		return "web/search";
	}
	
	/**
	 * 查询处理
	 * 
	 * @return
	 */
	@RequestMapping("/gbDoQuery.html")
	public String doQuery(ModelMap map,	HttpServletResponse response,String qcode,String phone) {
		Guestbook param = new Guestbook();
		if (StringUtils.isNotEmpty(qcode)) {
			param.setId(qcode);
		} else {
			param.setTel(phone);
		}
		List<Guestbook> guestbookList = guestbookService.find(param);
		if (null != guestbookList && guestbookList.size() > 0) {
			for (Guestbook guestbook : guestbookList) {
				List<Guestbook> replyList = guestbookService.findByParid(
						guestbook.getId(), true);
				guestbook.setReplyList(replyList);
			}
		}
		map.put("guestbookList", guestbookList);
		return "web/guestbook";
	}

	/**
	 * 事项提交保存
	 * 
	 * @return
	 */
	@RequestMapping("/gbSave.html")
	@ResponseBody
	public String guestbookSave(
			@PathVariable String appid,
			@RequestParam(value = "imgfile", required = false) MultipartFile[] imgfiles,
			Guestbook guestbook, ModelMap map, HttpServletResponse response,String memberid) {
		if (guestbook == null) {
			return null;
		}
		
		try {
			String imgurls = "";
			// 新上传的附件
			if (imgfiles != null && imgfiles.length > 0) {
				MultipartFile currAttch;
				for (int i = 0; i < imgfiles.length; i++) {
					currAttch = imgfiles[i];

					if (currAttch != null && currAttch.getSize() > 0) {// 生成目标文件
						String ext = FileUtil.getExt(
								currAttch.getOriginalFilename()).toLowerCase();

						String filename = new Date().getTime() + ext;
						File targetFile = new File(OssConfig.ROOT_PATH
								+ File.separator + appid + File.separator
								+ filename);
						File folder = new File(OssConfig.ROOT_PATH
								+ File.separator + appid + File.separator);
						if (!folder.exists()) {
							folder.mkdirs();
						}
						if (!targetFile.exists()) {
							targetFile.createNewFile();
						}
						// 复制到目标文件
						FileUtil.copy(currAttch, targetFile);
						// 生成访问地址
						imgurls = imgurls + "/images/" + filename + ",";
					}
				}
			}

			if (StringUtils.isNotEmpty(imgurls)) {
				if (imgurls.endsWith(",")) {
					imgurls = imgurls.substring(0, imgurls.length() - 1);
				}
				guestbook.setAlbums(imgurls);
			}
			// 保存留言内容
			Member member=memberService.findById(guestbook.getMemberid());
			guestbook.setName(member.getName());
			guestbook.setAddtime(new Date());
			guestbook.setIp(request.getRemoteAddr());
			guestbook.setState("0");
			msg = guestbookService.add(guestbook);
			
			//跳转至按自身tel对应的list页面
			Site site = siteService.findById(appid);
			String url = site.getSitedomain()+ "/web/gbDoQuery.html?phone="+guestbook.getTel();
			// 发送模板通知
			Map<String, String> data = new HashMap<String, String>();
			data.put("first", "您好，我们已成功受理您提交的事项");
			data.put("keyword1", guestbook.getAddtimeStr());
			data.put("keyword2", "事项上报");
			data.put("keyword3", "正在处理中");
			data.put("remark",
					"1.我们将会通过微信或者电话及时给您反馈处理进度。\n 2.您可以使用手机号主动查询处理进度.");
			mpMsgService.sendMsg(appid, guestbook.getMemberid(), tmlShortId,
					url, data);
		} catch (Exception e) {
			e.printStackTrace();
		}
		return msg;
	}
}
