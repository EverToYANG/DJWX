package com.gsccs.cms.controller.module;

import java.util.Date;
import java.util.List;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletResponse;

import org.apache.commons.lang3.StringUtils;
import org.springframework.stereotype.Controller;
import org.springframework.ui.ModelMap;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;

import com.gsccs.cms.bass.controller.CmsBaseController;
import com.gsccs.cms.bass.utils.Pager;
import com.gsccs.cms.core.service.ChannelService;
import com.gsccs.cms.core.service.SiteService;
import com.gsccs.cms.module.model.Guestbook;
import com.gsccs.cms.module.service.GuestBookService;

/**
 * 留言本相关操作
 * 
 * 
 * @author x.d zhang
 * @version 1.0
 * 
 */
@Controller
@RequestMapping("/guestbook")
public class GuestbookController extends CmsBaseController {

	@Resource
	private GuestBookService guestbookService;

	/**
	 * 留言列表
	 * 
	 * @return
	 */
	@RequestMapping("/list.do")
	public String list(Guestbook guestbook, String type,
			@RequestParam(defaultValue = " addtime desc ") String order,
			@RequestParam(defaultValue = "1") int currPage,
			@RequestParam(defaultValue = "10") int pageSize, ModelMap map,
			HttpServletResponse response) {
		if (guestbook == null) {
			guestbook = new Guestbook();
		}
		guestbook.setType(type);
		guestbook.setSiteid(getManageSite().getId());
		List<Guestbook> guestbookList = guestbookService.find(guestbook, order,
				currPage, pageSize, false);
		int totalCount = guestbookService.count(guestbook, false);
		Pager pager = new Pager(request);
		pager.appendParam("title");
		pager.appendParam("name");
		pager.appendParam("state");
		pager.appendParam("pageSize");
		pager.appendParam("pageFuncId");
		pager.setCurrPage(currPage);
		pager.setPageSize(pageSize);
		pager.setTotalCount(totalCount);
		pager.setOutStrBootstrap("guestbook/list.do");
		map.put("pageStr", pager.getOutStrBootstrap());
		map.put("list", guestbookList);
		map.put("order", order);
		map.put("guestbook", guestbook);

		return "module/guestbook";
	}

	/**
	 * 办理 页面
	 * 
	 * @return
	 */
	@RequestMapping("/pro.do")
	public String guestbookPro(Guestbook guestbook, ModelMap map,
			HttpServletResponse response) {
		if (guestbook != null && guestbook.getId() != null
				&& guestbook.getId().trim().length() > 0) {
			guestbook = guestbookService.findById(guestbook.getId());
		}
		map.put("guestbook", guestbook);
		return "module/guestbookPro";
	}

	/**
	 * 办理
	 * 
	 * @return
	 */
	@RequestMapping("/proDo.do")
	public String guestbookProDo(Guestbook guestbook, String pageFuncId,
			ModelMap map, HttpServletResponse response) {
		if (guestbook != null && StringUtils.isNotEmpty(guestbook.getId())) {
			Guestbook replyguestbook = new Guestbook();
			replyguestbook.setParid(guestbook.getId());
			replyguestbook.setContent(guestbook.getContent());
			replyguestbook.setAddtime(new Date());
			replyguestbook.setReuserid(getLoginUser().getId());
			replyguestbook.setReusername(getLoginName());
			// 更新状态
			Guestbook oldguestbook = null;
			try {

				// 新增回复
				guestbookService.add(replyguestbook);

				// 更新状态
				oldguestbook = guestbookService.findById(guestbook.getId());
				oldguestbook.setState("2");
				guestbookService.update(oldguestbook);

				msg = "回复:" + oldguestbook.getTitle() + " 成功";
				map.put("forwardSeconds", 3);
			} catch (Exception e) {
				e.printStackTrace();
				map.put("forwardSeconds", 0);
				msg = "回复:" + oldguestbook.getTitle() + " 失败:" + e.getMessage();
			} finally {
				operlogService.log(getLoginName(), msg, request);
			}
		}
		map.put("msg", msg);
		map.put("forwardUrl", "guestbook/list.do?pageFuncId=" + pageFuncId);
		return "admin/msg";
	}

	/**
	 * 查看留言详情 页面
	 * 
	 * @return
	 */
	@RequestMapping("/check.do")
	public String guestbookCheck(Guestbook guestbook, ModelMap map,
			HttpServletResponse response){
		if (guestbook != null && guestbook.getId() != null
				&& guestbook.getId().trim().length() > 0) {
			guestbook = guestbookService.findById(guestbook.getId());
		}
		map.put("guestbook", guestbook);
		return "guestbook/check";
	}

	/**
	 * 删除
	 * 
	 * @return
	 */
	@RequestMapping("/del.do")
	public String guestbookDel(String ids, String pageFuncId, ModelMap map,
			HttpServletResponse response) {
		if (ids != null && ids.trim().length() > 0) {
			String[] idArr = ids.split(";");
			if (idArr != null && idArr.length > 0) {
				Guestbook guestbook = null;
				for (int i = 0; i < idArr.length; i++) {
					if (idArr[i].trim().length() > 0) {
						try {
							guestbook = guestbookService.findById(idArr[i]);
							if (guestbook != null) {
								guestbookService.del(guestbook.getId());
								msg = "删除留言(" + guestbook.getTitle() + ")成功!";
								map.put("forwardSeconds", 3);
							}
						} catch (Exception e) {
							map.put("forwardSeconds", 0);
							e.printStackTrace();
							msg = "删除留言(" + guestbook.getTitle() + ")失败:"
									+ e.toString() + "!";
						}
						operlogService.log(getLoginName(), msg, request);
					}
				}
			}
		}
		map.put("msg", msg);
		map.put("forwardUrl", "guestbook/list.do?pageFuncId=" + pageFuncId);
		return "admin/msg";
	}
}
