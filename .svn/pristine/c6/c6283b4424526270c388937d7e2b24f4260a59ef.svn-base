package com.gsccs.cms.core.service.impl;

import java.util.List;
import java.util.UUID;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;

import org.apache.commons.lang3.StringUtils;
import org.springframework.stereotype.Service;

import com.gsccs.cms.core.dao.ChannelMapper;
import com.gsccs.cms.core.dao.RoleChannelMapper;
import com.gsccs.cms.core.model.Channel;
import com.gsccs.cms.core.model.ChannelExample;
import com.gsccs.cms.core.model.RoleChannel;
import com.gsccs.cms.core.model.RoleChannelExample;
import com.gsccs.cms.core.model.RoleChannelExample.Criteria;
import com.gsccs.cms.core.service.RoleChannelService;

@Service("roleChannelService")
public class RoleChannelServiceImpl implements RoleChannelService{

	@Resource
	private RoleChannelMapper roleChannelMapper;
	@Resource
	private ChannelMapper channelMapper;
	
	/**
	 * 根据角色删除
	 * @param roleid
	 */
	public void delByRole(String roleid){
		RoleChannelExample example=new RoleChannelExample();
		Criteria criteria=example.createCriteria();
		criteria.andRoleidEqualTo(roleid);
		roleChannelMapper.deleteByExample(example);
	}
	
	
	/**
	 * 根据角色删除
	 * @param roleid
	 */
	public void delByRoleSite(String roleid,String siteid){
		RoleChannelExample example=new RoleChannelExample();
		Criteria criteria=example.createCriteria();
		criteria.andRoleidEqualTo(roleid);
		criteria.andSql(" channelid in (select id from cms_channel where site='"+siteid+"') ");
		roleChannelMapper.deleteByExample(example);
	}
	
	
	/**
	 * 保存
	 * @param roleid
	 * @param channelid
	 */
	public void save(String roleid,String channelid){
		RoleChannel roleChannel=new RoleChannel();
		roleChannel.setId(UUID.randomUUID().toString());
		roleChannel.setRoleid(roleid);
		roleChannel.setChannelid(channelid);
		roleChannelMapper.insert(roleChannel);
	}
	/**
	 * 判断是否有权限
	 * @param roleid
	 * @param channelid
	 */
	public boolean have(String roleid,String channelid){
		RoleChannelExample example=new RoleChannelExample();
		Criteria criteria=example.createCriteria();
		criteria.andRoleidEqualTo(roleid);
		criteria.andChannelidEqualTo(channelid);
		return roleChannelMapper.countByExample(example)>0;
	}
	
	
	/**
	 * 判断是否有权限
	 * @param roleid
	 * @param channelid
	 */
	public boolean haves(String roles,String channelid){
		RoleChannelExample example=new RoleChannelExample();
		Criteria criteria=example.createCriteria();
		criteria.andSql(" roleid in ("+roles+") ");
		criteria.andChannelidEqualTo(channelid);
		return roleChannelMapper.countByExample(example)>0;
	}
	/**
	 * 生成授权树
	 * @param roleid
	 * @return
	 */
	public String createTree(HttpServletRequest request,String roleid,String siteid){
		StringBuffer html=new StringBuffer();
		if (StringUtils.isNotEmpty(roleid)) {
			//查询
			List<Channel> list=this.findBySite(siteid, null, null);
			//生成一级
			if (list!=null && list.size()>0) {
				boolean hasChildren=false;
				for (int i = 0; i < list.size(); i++) {
					if (StringUtils.isEmpty(list.get(i).getParid())) {
						hasChildren=false;
						html.append("<tr treeItemLevel='1'>");
						html.append("<td><input "+(have(roleid, list.get(i).getId())?"checked":"")+" onclick='treeIdCheck(\""+list.get(i).getId()+"\")' type='checkbox' name='ids' value='"+list.get(i).getId()+"' id='"+list.get(i).getId()+"'/></td>");
						html.append("<td>");

						if (this.hasChildren(list.get(i).getId())) {
							hasChildren=true;
							html.append("<img align='absmiddle' style='cursor:pointer' onClick='displayChildren(this);' isAjax='false' isOpen='true' id='"+list.get(i).getId()+"' src='"+request.getContextPath()+"/static/tree/image/minus.gif' />");
						}else {
							html.append("<img align='absmiddle' src='"+request.getContextPath()+"/static/tree/image/empty.gif' />");
						}
						html.append("<img align='absmiddle' border='0' src='"+request.getContextPath()+"/static/tree/image/folder.gif' />&nbsp;");
						html.append(list.get(i).getName());
						html.append("</td></tr>");
						if (hasChildren) {
							//处理子级
							createTreeSon(request,list, list.get(i).getId(),roleid, html,2,list.get(i).getId());
						}
					}
				}
			}
		}
		return html.toString();
	}
	/**
	 * 生成授权树
	 * @param roleid
	 * @return
	 */
	public String createTreeSon(HttpServletRequest request,List<Channel> list,String pid,String roleid,StringBuffer html,int treeItemLevel,String pidpath){
		if (StringUtils.isNotEmpty(roleid)) {
			//生成子级
			if (list!=null && list.size()>0) {
				boolean hasChildren=false;
				for (int i = 0; i < list.size(); i++) {
					if (pid.equals((list.get(i).getParid()))) {
						hasChildren=false;
						html.append("<tr treeItemLevel='"+treeItemLevel+"'>");
						html.append("<td><input "+(have(roleid, list.get(i).getId())?"checked":"")+" onclick='treeIdCheck(\""+pidpath+"_"+list.get(i).getId()+"\")'  type='checkbox' name='ids' value='"+list.get(i).getId()+"' id='"+pidpath+"_"+list.get(i).getId()+"'/></td>");
						html.append("<td>");
						for (int j = 1; j < treeItemLevel; j++) {
							html.append("<img align='absmiddle' src='"+request.getContextPath()+"/static/tree/image/empty.gif' />");
						}
						if (this.hasChildren(list.get(i).getId())) {
							hasChildren=true;
							html.append("<img align='absmiddle' style='cursor:pointer' onClick='displayChildren(this);' isAjax='false' isOpen='true' id='"+list.get(i).getId()+"' src='"+request.getContextPath()+"/static/tree/image/minus.gif' />");
						}else {
							html.append("<img align='absmiddle' src='"+request.getContextPath()+"/static/tree/image/empty.gif' />");
						}
						html.append("<img align='absmiddle' border='0' src='"+request.getContextPath()+"/static/tree/image/folder.gif' />&nbsp;");
						html.append(list.get(i).getName());
						html.append("</td></tr>");
						if (hasChildren) {
							//处理子级
							createTreeSon(request,list, list.get(i).getId(),roleid, html,treeItemLevel+1,pidpath+"_"+list.get(i).getId());
						}
					}
				}
			}
		}
		return html.toString();
	}
	
	/**
	 * 根据站点查询
	 * @param siteid
	 * @param parid
	 * @return
	 */
	public List<Channel> findBySite(String siteid,String state,String navigation){
		ChannelExample example=new ChannelExample();
		ChannelExample.Criteria criteria=example.createCriteria();
		if (siteid!=null && siteid.trim().length()>0) {
			criteria.andSiteEqualTo(siteid.trim());
		}
		if (state!=null && state.trim().length()>0) {
			criteria.andStateEqualTo(state.trim());
		}
		if (navigation!=null && navigation.trim().length()>0) {
			criteria.andNavigationEqualTo(navigation.trim());
		}
		example.setOrderByClause(" orderNum ");
		return channelMapper.selectByExample(example);
	}
	
	/**
	 * 查询是否有子数据
	 * @param parId
	 * @return
	 */
	public boolean hasChildren(String parId){
		ChannelExample example=new ChannelExample();
		ChannelExample.Criteria criteria=example.createCriteria();
		criteria.andParidEqualTo(parId);
		return channelMapper.countByExample(example)>0;
	}
	
}
