package com.gsccs.cms.bass.filter;

import java.io.IOException;
import java.util.Date;

import javax.servlet.Filter;
import javax.servlet.FilterChain;
import javax.servlet.FilterConfig;
import javax.servlet.ServletException;
import javax.servlet.ServletRequest;
import javax.servlet.ServletResponse;
import javax.servlet.http.HttpServletRequest;

import org.springframework.web.context.WebApplicationContext;
import org.springframework.web.context.support.WebApplicationContextUtils;

import com.gsccs.cms.core.model.Channel;
import com.gsccs.cms.core.model.Content;
import com.gsccs.cms.core.model.Site;
import com.gsccs.cms.core.model.Visit;
import com.gsccs.cms.core.service.ChannelService;
import com.gsccs.cms.core.service.ContentService;
import com.gsccs.cms.core.service.SiteService;
import com.gsccs.cms.core.service.VisitService;

public class VisitFilter implements Filter {

	private SiteService siteService;
	private ChannelService channelService;
	private ContentService contentService;
	private VisitService visitService;
	private FilterConfig filterConfig;

	/**
	 * 过滤处理的方法
	 */
	public void doFilter(final ServletRequest req, final ServletResponse res,
			FilterChain chain) throws IOException, ServletException {
		HttpServletRequest hreq = (HttpServletRequest) req;
		String uri = hreq.getRequestURI().replaceFirst(hreq.getContextPath(),
				"");
		String queryString = hreq.getQueryString();
		try {
			WebApplicationContext wac = WebApplicationContextUtils
					.getWebApplicationContext(filterConfig.getServletContext());
			channelService = (ChannelService) wac.getBean("channelService");
			siteService = (SiteService) wac.getBean("siteService");
			contentService = (ContentService) wac.getBean("contentService");
			visitService = (VisitService) wac.getBean("visitService");
			Visit visit = null;
			if (uri.startsWith("/site/") && uri.endsWith(".html")) {
				// 访问静态页面
				// 提取站点源文件夹
				String uri1 = uri.replaceFirst("/site/", "");
				String siteFloder = uri1.substring(0, uri1.indexOf("/"));
				// 查询是否有此站点
				Site site = siteService.findBySourcepath(siteFloder);
				if (site != null) {
					visit = new Visit();
					visit.setSiteid(site.getId());
					// 提取栏目id
					String uri2 = uri1.replaceFirst(siteFloder + "/", "");
					String channelid = uri2.substring(0, uri2.indexOf("/"));
					if (channelid != null && channelid.length() > 0) {
						// 查询栏目
						Channel channel = channelService.findBySitePagemark(
								site.getId(), channelid);
						if (channel == null) {
							channel = channelService.findById(channelid);
						}
						if (channel == null) {
							try {
								channel = channelService.findBySiteIndexnum(
										site.getId(),
										Integer.parseInt(channelid));
							} catch (Exception e) {
							}
						}
						if (channel != null) {
							visit.setChannelid(channel.getId());
							// 提取信息id
							if (uri2.indexOf("/info/") > -1) {
								String infoid = uri2.substring(
										uri2.lastIndexOf("/") + 1,
										uri2.lastIndexOf("."));
								Content info = contentService.findById(infoid);
								if (info == null) {
									try {
										info = contentService
												.findByIndexnum(Integer
														.parseInt(infoid));
									} catch (Exception e) {
									}
								}
								if (info != null) {
									visit.setInfoid(info.getId());
								}
							}
						}
					}
				}
			} else if (uri.startsWith("/templetPro.do")) {
				// 前台动态数据
				if (hreq.getParameter("siteid") != null
						&& hreq.getParameter("siteid").trim().length() > 0) {
					// 设置所属站点
					visit = new Visit();
					visit.setSiteid(hreq.getParameter("siteid").trim());
				}
				if (hreq.getParameter("currChannelid") != null
						&& hreq.getParameter("currChannelid").trim().length() > 0) {
					// 设置所属栏目
					if (visit == null) {
						visit = new Visit();
					}
					visit.setChannelid(hreq.getParameter("currChannelid")
							.trim());
					// 如果没有所属站点则提取栏目的所属站点
					if (visit.getSiteid() == null
							|| visit.getSiteid().trim().length() == 0) {
						Channel channel = channelService.findById(hreq
								.getParameter("currChannelid").trim());
						if (channel != null && channel.getSite() != null) {
							visit.setSiteid(channel.getSite());
						}
					}
				}
				if (hreq.getParameter("currInfoid") != null
						&& hreq.getParameter("currInfoid").trim().length() > 0) {
					// 设置所属信息
					if (visit == null) {
						visit = new Visit();
					}
					visit.setInfoid(hreq.getParameter("currInfoid").trim());
					// 如果没有所属站点则提取栏目的所属站点
					if ((visit.getSiteid() == null || visit.getSiteid().trim()
							.length() == 0)
							|| (visit.getChannelid() == null || visit
									.getChannelid().trim().length() == 0)) {
						Content info = contentService.findById(hreq
								.getParameter("currInfoid").trim());
						if (info != null) {
							visit.setSiteid(info.getSite());
							visit.setChannelid(info.getChannel());
						}
					}
				}
			}
			if (visit != null) {
				// 添加访问记录
				visit.setAddtime(new Date());
				visit.setUrl(uri
						+ (queryString != null ? "?" + queryString : ""));
				visit.setIp(hreq.getRemoteAddr());
				visitService.add(visit);
			}
		} catch (Exception e) {
			// e.printStackTrace();
		}
		chain.doFilter(req, res);
	}

	public void init(FilterConfig init) throws ServletException {
		filterConfig = init;
	}

	public void destroy() {
	}

}
