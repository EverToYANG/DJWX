package com.gsccs.cms.freemarker.directive;

import java.io.IOException;
import java.util.List;
import java.util.Map;

import javax.annotation.Resource;

import org.springframework.stereotype.Service;

import com.gsccs.cms.bass.base.BaseDirective;
import com.gsccs.cms.module.model.VoteTopic;
import com.gsccs.cms.module.service.VoteService;

import freemarker.core.Environment;
import freemarker.ext.beans.BeanModel;
import freemarker.ext.beans.BeansWrapper;
import freemarker.template.SimpleNumber;
import freemarker.template.TemplateDirectiveBody;
import freemarker.template.TemplateDirectiveModel;
import freemarker.template.TemplateException;
import freemarker.template.TemplateModel;

/**
 * 网上调查列表
 * 
 * 参数: id 网上调查id name 名称 selecttype 选择类型 空字符串表示所有(默认) 0单选 1多选 isok 有效
 * 空字符串表示所有(默认) 0无效 1有效 cache 是否使用缓存，默认为false order 排序 1时间倒序(默认) 2时间正序 num 数量
 * nameLen 名称显示长度 siteid 站点id
 * 
 * 
 * 返回值 question 网上调查对象 index 索引
 * 
 * 示例 <@questionList ;question,index> ${index} : ${question.name}<br>
 * </@questionList>
 * 
 * @author x.d zhang
 * @version 1.0
 * 
 */

@Service("voteListDirective")
public class VoteListDirective extends BaseDirective implements
		TemplateDirectiveModel {

	@Resource
	private VoteService voteService;

	public void execute(Environment env, Map params, TemplateModel[] loopVars,
			TemplateDirectiveBody body) throws TemplateException, IOException {
		if (body != null) {
			// 设置循环变量
			if (loopVars != null && loopVars.length > 0) {
				// 查询网上调查
				String id = getParam(params, "id");
				String siteid = getParam(params, "siteid");
				String order = getParam(params, "order");
				String orderSql = " addtime desc ";
				// 标题长度
				int nameLen = getParamInt(params, "nameLen", 0);
				if ("2".equals(order)) {
					orderSql = " addtime ";
				}
				boolean cache = "true".equals(getParam(params, "cache")) ? true
						: false;
				VoteTopic question = new VoteTopic();
				question.setId(id);
				question.setSiteid(siteid);
				question.setName(getParam(params, "name"));
				question.setSelecttype(getParam(params, "selecttype"));
				question.setIsok(getParam(params, "isok"));
				List<VoteTopic> questionList = voteService.find(question,
						orderSql, 1, getParamInt(params, "num", 1), cache);
				if (questionList != null && questionList.size() > 0) {
					for (int i = 0; i < questionList.size(); i++) {
						if (nameLen > 0
								&& questionList.get(i).getName().length() > nameLen) {
							questionList.get(i).setName(
									questionList.get(i).getName()
											.substring(0, nameLen));
						}
						loopVars[0] = new BeanModel(questionList.get(i),
								new BeansWrapper());
						if (loopVars.length > 1) {
							loopVars[1] = new SimpleNumber(i);
						}
						body.render(env.getOut());
					}
				}
			}
		}
	}

}