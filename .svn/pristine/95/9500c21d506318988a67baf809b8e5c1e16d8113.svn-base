package com.gsccs.cms.controller.core;

import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.commons.lang3.StringUtils;
import org.springframework.beans.propertyeditors.CustomDateEditor;
import org.springframework.stereotype.Controller;
import org.springframework.ui.ModelMap;
import org.springframework.web.bind.WebDataBinder;
import org.springframework.web.bind.annotation.InitBinder;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;

import com.gsccs.cms.bass.controller.CmsBaseController;
import com.gsccs.cms.bass.exception.AuthException;
import com.gsccs.cms.bass.exception.SiteCheckException;
import com.gsccs.cms.bass.utils.Pager;
import com.gsccs.cms.core.model.Job;
import com.gsccs.cms.core.service.JobService;

/**
 * 
 * 职位功能相关操作
 * 
 * @author x.d zhang
 * @version 1.0
 * 
 */
@Controller
public class JobController extends CmsBaseController {

	@Resource
	private JobService jobService;

	/**
	 * 管理页面
	 * 
	 * @param map
	 * @return
	 */
	@RequestMapping("/job.do")
	public String job(Job job, @RequestParam(defaultValue = "1") int currPage,
			@RequestParam(defaultValue = "10") int pageSize,
			@RequestParam(defaultValue = "") String order, ModelMap map,
			HttpServletRequest request, HttpServletResponse response)
			throws AuthException, SiteCheckException {
		if (job == null) {
			job = new Job();
		}
		job.setSiteid(getManageSite().getId());
		List<Job> jobList = jobService.find(job, order, currPage, pageSize,
				false);
		int totalCount = jobService.count(job, false);

		Pager pager = new Pager(request);
		pager.appendParam("name");
		pager.appendParam("unitname");
		pager.appendParam("address");
		pager.appendParam("replaceto");
		pager.appendParam("pageSize", "" + pageSize);
		pager.appendParam("pageFuncId");
		pager.setCurrPage(currPage);
		pager.setPageSize(pageSize);
		pager.setTotalCount(totalCount);
		pager.setOutStrBootstrap("job.do");
		map.put("pageStr", pager.getOutStrBootstrap());
		map.put("list", jobList);
		map.put("order", order);
		return "cms/job";
	}

	/**
	 * 编辑页面
	 * 
	 * @param map
	 * @return
	 */
	@RequestMapping("/jobEdit.do")
	public String jobEdit(Job job, ModelMap map, HttpServletRequest request,
			HttpServletResponse response) throws AuthException,
			SiteCheckException {
		if (job != null && job.getId() != null
				&& job.getId().trim().length() > 0) {
			job = jobService.findById(job.getId(), false);
			map.put("job", job);
		}
		return "cms/jobEdit";
	}

	/**
	 * 编辑
	 * 
	 * @param map
	 * @return
	 */
	@RequestMapping("/jobEditDo.do")
	public String jobEditDo(Job job, String pageFuncId, ModelMap map,
			HttpServletRequest request, HttpServletResponse response)
			throws AuthException, SiteCheckException {
		String oper = "添加";
		try {
			job.setSiteid(getManageSite().getId());
			if (job != null && StringUtils.isNotEmpty(job.getId())) {
				oper = "修改";
				jobService.update(job);
			} else {
				// 添加
				if (job.getAddtime() == null) {
					job.setAddtime(new Date());
				}
				jobService.add(job);
			}
			msg = oper + "职位(" + job.getName() + ")成功!";
			map.put("forwardSeconds", 3);
		} catch (Exception e) {
			e.printStackTrace();
			map.put("forwardSeconds", 0);
			msg = oper + "职位(" + job.getName() + ")失败:" + e.toString() + "!";
		}
		operlogService.log(getLoginName(), oper, request);
		map.put("msg", msg);
		map.put("forwardUrl", "job.do?pageFuncId=" + pageFuncId);
		return "admin/msg";
	}

	/**
	 * 删除
	 * 
	 * @param map
	 * @return
	 */
	@RequestMapping("/jobDel.do")
	public String jobDel(String pageFuncId, String ids,
			HttpServletRequest request, ModelMap map,
			HttpServletResponse response) throws AuthException,
			SiteCheckException {

		if (ids != null && ids.trim().length() > 0) {
			String[] idArr = ids.split(";");
			if (idArr != null && idArr.length > 0) {
				Job job = null;
				for (int i = 0; i < idArr.length; i++) {
					if (idArr[i].trim().length() > 0) {
						try {
							job = jobService.findById(idArr[i], false);
							if (job != null) {
								jobService.del(job.getId());
								msg = "删除职位(" + job.getName() + ")成功!";
							}
							map.put("forwardSeconds", 3);
						} catch (Exception e) {
							map.put("forwardSeconds", 0);
							e.printStackTrace();
							msg = "删除职位(" + job.getName() + ")失败:"
									+ e.toString() + "!";
						}
						operlogService.log(getLoginName(), msg, request);
					}
				}
			}
		}
		map.put("msg", msg);
		map.put("forwardUrl", "job.do?pageFuncId=" + pageFuncId);
		return "admin/msg";
	}

	
	/**
	 * 日期型数据转换，将页面上的表示日期限的字符串，转换为Date型
	 * **/
	@InitBinder
	public void initBinder(WebDataBinder binder) {
		SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
		dateFormat.setLenient(true);
		binder.registerCustomEditor(Date.class, new CustomDateEditor(
				dateFormat, true));

	}
}
