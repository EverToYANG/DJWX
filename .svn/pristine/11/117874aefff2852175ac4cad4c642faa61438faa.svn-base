package com.gsccs.cms.core.service.impl;

import java.io.File;
import java.io.IOException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.UUID;

import javax.annotation.Resource;
import javax.servlet.ServletContext;
import javax.servlet.http.HttpServletRequest;

import org.apache.commons.lang3.StringUtils;
import org.apache.solr.client.solrj.SolrQuery;
import org.apache.solr.client.solrj.SolrQuery.ORDER;
import org.apache.solr.client.solrj.SolrServerException;
import org.apache.solr.client.solrj.impl.HttpSolrServer;
import org.apache.solr.client.solrj.response.QueryResponse;
import org.apache.solr.common.SolrDocument;
import org.apache.solr.common.SolrDocumentList;
import org.springframework.stereotype.Service;

import com.gsccs.cms.auth.model.Config;
import com.gsccs.cms.auth.service.ConfigService;
import com.gsccs.cms.auth.service.OperlogService;
import com.gsccs.cms.bass.utils.FreeMarkerUtil;
import com.gsccs.cms.bass.utils.SqlUtil;
import com.gsccs.cms.core.dao.ContentMapper;
import com.gsccs.cms.core.model.Channel;
import com.gsccs.cms.core.model.Content;
import com.gsccs.cms.core.model.ContentExample;
import com.gsccs.cms.core.model.Site;
import com.gsccs.cms.core.model.ContentExample.Criteria;
import com.gsccs.cms.core.service.ChannelService;
import com.gsccs.cms.core.service.ContentService;
import com.gsccs.cms.core.service.SiteService;
import com.gsccs.cms.core.util.CmsConst;
import com.gsccs.cms.search.SolrServer;
import com.gsccs.cms.search.service.IndexService;

import freemarker.template.TemplateException;

/**
 * 网站内容相关服务
 * 
 * @author x.d zhang
 * @version 1.0
 * 
 */
@Service("contentService")
public class ContentServiceImpl implements ContentService {

	@Resource
	private ContentMapper contentMapper;
	@Resource
	private ChannelService channelService;
	@Resource
	private SiteService siteService;
	@Resource
	private OperlogService operlogService;
	@Resource
	private ConfigService configService;
	@Resource
	private IndexService indexService;

	
	/**
	 * 分页查询
	 * 
	 * @param info
	 * @param order
	 * @param currPage
	 * @param pageSize
	 * @return
	 */
	public List<Content> find(Content info, String order, int currPage,
			int pageSize) {
		ContentExample example = new ContentExample();
		Criteria criteria = example.createCriteria();
		//proSearchParam(info, criteria);
		if (order != null && order.trim().length() > 0) {
			example.setOrderByClause(order);
		}
		example.setCurrPage(currPage);
		example.setPageSize(pageSize);
		return contentMapper.selectPageByExample(example);
	}

	/**
	 * 查询所有
	 * 
	 * @param info
	 * @param order
	 * @return
	 */
	public List<Content> findAll(Content info, String order) {
		ContentExample example = new ContentExample();
		Criteria criteria = example.createCriteria();
		proSearchParam(info, criteria);
		if (order != null && order.trim().length() > 0) {
			example.setOrderByClause(order);
		}
		return contentMapper.selectByExample(example);
	}

	/**
	 * 统计
	 * 
	 * @param info
	 * @return
	 */
	public int count(Content info) {
		ContentExample example = new ContentExample();
		Criteria criteria = example.createCriteria();
		proSearchParam(info, criteria);
		return contentMapper.countByExample(example);
	}

	/**
	 * 处理查询条件
	 * 
	 * @param info
	 * @param criteria
	 */
	public void proSearchParam(Content info, Criteria criteria) {
		if (info != null) {
			if (info.getId() != null && info.getId().trim().length() > 0) {
				criteria.andInfoIdEqualTo(info.getId());
			}
			if (info.getSite() != null && info.getSite().trim().length() > 0) {
				criteria.andInfoSiteEqualTo(info.getSite());
			}

			if (info.getChannel() != null
					&& info.getChannel().trim().length() > 0) {
				criteria.andChannelEqualTo(info.getChannel());
			}
			
			if (info.getChannelids() != null && info.getChannelids().size() > 0) {
				criteria.andChannelIn(info.getChannelids());
			}

			info.setTitle(SqlUtil.replace(info.getTitle()));
			if (info.getTitle() != null && info.getTitle().trim().length() > 0) {
				criteria.andTitleLike("%" + info.getTitle().trim() + "%");
			}
			if (info.getIstop() != null && info.getIstop().trim().length() > 0) {
				criteria.andIstopEqualTo(info.getIstop());
			}
			
			if (info.getChannels() != null && info.getChannels().length > 0) {
				List<String> idList = new ArrayList<String>();
				for (int i = 0; i < info.getChannels().length; i++) {
					idList.add(info.getChannels()[i]);
				}
				criteria.andChannelIn(idList);
			}
			/*info.setChannelPagemark(SqlUtil.replace(info.getChannelPagemark()));
			if (info.getChannelPagemark() != null
					&& info.getChannelPagemark().trim().length() > 0) {
				criteria.andSql(" (channel in (select id from cms_channel where site='"
						+ info.getSite()
						+ "' and pagemark='"
						+ info.getChannelPagemark() + "')) ");
			}
			if (info.getIncludePagemark() != null
					&& info.getIncludePagemark().trim().length() > 0) {
				criteria.andSql("(channel in (select id from cms_channel where site='"
						+ info.getSite()
						+ "' and pagemark in("
						+ info.getIncludePagemark() + ")))");
			}
			if (info.getImg() != null && info.getImg().trim().length() > 0) {
				criteria.andSql(" (i.img is not null and i.img !='') ");
			}
			if (info.getStarttime() != null) {
				criteria.andAddtimeGreaterThanOrEqualTo(info.getStarttime());
			}
			if (info.getEndtime() != null) {
				criteria.andAddtimeLessThanOrEqualTo(info.getEndtime());
			}
			if (info.getInfostarttime() != null) {
				criteria.andInfoAddtimeGreaterThanOrEqualTo(info
						.getInfostarttime());
			}
			if (info.getInfoendtime() != null) {
				criteria.andInfoAddtimeLessThanOrEqualTo(info.getInfoendtime());
			}
			if (info.getInfostarttimeNoeq() != null) {
				criteria.andInfoAddtimeGreaterThan(info.getInfostarttimeNoeq());
			}
			if (info.getInfoendtimeNoeq() != null) {
				criteria.andInfoAddtimeLessThan(info.getInfoendtimeNoeq());
			}

			if (null != info.getHtmlIndexnum() && info.getHtmlIndexnum() > 0) {
				criteria.andHtmlIndexnumEqualTo(info.getHtmlIndexnum());
			}*/

		}
	}

	/**
	 * 添加
	 * 
	 * @param info
	 * @return
	 */
	public String insert(Content content) {
		String id = "";
		if (content != null) {
			id = UUID.randomUUID().toString();
			content.setId(id);
			contentMapper.insert(content);
			indexService.writeDoc(content);
		}
		return id;
	}

	/**
	 * 更新
	 * 
	 * @param info
	 */
	public void update(Content content) {
		contentMapper.updateByPrimaryKeyWithBLOBs(content);
		indexService.writeDoc(content);
	}

	/**
	 * 点击
	 * 
	 * @param info
	 * @return
	 */
	public void click(Content info) {
		contentMapper.click(info);
	}

	/**
	 * 根据id查询
	 * 
	 * @param id
	 * @return
	 */
	public Content findById(String id) {
		return contentMapper.selectByPrimaryKey(id);
	}

	/**
	 * 根据indexnum查询
	 * 
	 * @param id
	 * @return
	 */
	public Content findByIndexnum(int indexnum) {
		Content info = new Content();
		info.setHtmlIndexnum(indexnum);
		List<Content> infoList = findAll(info, "");
		if (infoList != null && infoList.size() > 0) {
			return infoList.get(0);
		}
		return null;
	}

	/**
	 * 根据id查询
	 * 
	 * @param id
	 * @return
	 */
	public Content findClickById(String id) {
		return contentMapper.selectClickByPrimaryKey(id);
	}

	public void del(String id) {
		contentMapper.deleteByPrimaryKey(id);
	}

	/**
	 * 工作量统计
	 * 
	 * @param info
	 * @return
	 */
	public List<Content> workload(Content info, int currPage, int pageSize) {
		ContentExample example = new ContentExample();
		Criteria criteria = example.createCriteria();
		proSearchParam(info, criteria);
		example.setCurrPage(currPage);
		example.setPageSize(pageSize);
		return contentMapper.workloadPage(example);
	}

	/**
	 * 工作量统计
	 * 
	 * @param info
	 * @return
	 */
	public List<Content> workload(Content info) {
		ContentExample example = new ContentExample();
		Criteria criteria = example.createCriteria();
		proSearchParam(info, criteria);
		return contentMapper.workload(example);
	}

	/**
	 * 工作量统计
	 * 
	 * @param info
	 * @return
	 */
	public int workloadCount(Content info) {
		ContentExample example = new ContentExample();
		Criteria criteria = example.createCriteria();
		proSearchParam(info, criteria);
		return contentMapper.workloadCount(example);
	}

	/**
	 * 工作量合计
	 * 
	 * @param info
	 * @return
	 */
	public int workloadSum(Content info) {
		ContentExample example = new ContentExample();
		Criteria criteria = example.createCriteria();
		proSearchParam(info, criteria);
		return contentMapper.workloadSum(example);
	}

	/**
	 * 站点内容统计
	 * 
	 * @param info
	 * @return
	 */
	public List<Content> siteStat(Content info, int currPage, int pageSize) {
		ContentExample example = new ContentExample();
		Criteria criteria = example.createCriteria();
		proSearchParam(info, criteria);
		example.setCurrPage(currPage);
		example.setPageSize(pageSize);
		return contentMapper.siteStatPage(example);
	}

	/**
	 * 站点内容统计
	 * 
	 * @param info
	 * @return
	 */
	public List<Content> siteStat(Content info) {
		ContentExample example = new ContentExample();
		Criteria criteria = example.createCriteria();
		proSearchParam(info, criteria);
		return contentMapper.siteStat(example);
	}

	/**
	 * 站点内容统计
	 * 
	 * @param info
	 * @return
	 */
	public int siteStatCount(Content info) {
		ContentExample example = new ContentExample();
		Criteria criteria = example.createCriteria();
		proSearchParam(info, criteria);
		return contentMapper.siteStatCount(example);
	}

	/**
	 * 站点内容合计
	 * 
	 * @param info
	 * @return
	 */
	public int siteStatSum(Content info) {
		ContentExample example = new ContentExample();
		Criteria criteria = example.createCriteria();
		proSearchParam(info, criteria);
		return contentMapper.siteStatSum(example);
	}

	/**
	 * 栏目信息统计
	 * 
	 * @param info
	 * @return
	 */
	public List<Content> channelStat(Content info) {
		ContentExample example = new ContentExample();
		Criteria criteria = example.createCriteria();
		proSearchParam(info, criteria);
		return contentMapper.channelStat(example);
	}

	/**
	 * 栏目信息统计
	 * 
	 * @param info
	 * @return
	 */
	public int channelStatCount(Content info) {
		ContentExample example = new ContentExample();
		Criteria criteria = example.createCriteria();
		proSearchParam(info, criteria);
		return contentMapper.channelStatCount(example);
	}

	/**
	 * 栏目信息合计
	 * 
	 * @param info
	 * @return
	 */
	public int channelStatSum(Content info) {
		ContentExample example = new ContentExample();
		Criteria criteria = example.createCriteria();
		proSearchParam(info, criteria);
		return contentMapper.channelStatSum(example);
	}

	/**
	 * 信息更新统计 年
	 * 
	 * @param info
	 * @return
	 */
	public List<Content> infoUpdateYear(Content info) {
		ContentExample example = new ContentExample();
		Criteria criteria = example.createCriteria();
		proSearchParam(info, criteria);
		return contentMapper.infoUpdateYear(example);
	}

	/**
	 * 信息更新统计 年
	 * 
	 * @param info
	 * @return
	 */
	public List<Content> infoUpdateYear(Content info, int currPage, int pageSize) {
		ContentExample example = new ContentExample();
		Criteria criteria = example.createCriteria();
		proSearchParam(info, criteria);
		example.setCurrPage(currPage);
		example.setPageSize(pageSize);
		return contentMapper.infoUpdateYearPage(example);
	}

	/**
	 * 信息更新统计 年
	 * 
	 * @param info
	 * @return
	 */
	public int infoUpdateYearCount(Content info) {
		ContentExample example = new ContentExample();
		Criteria criteria = example.createCriteria();
		proSearchParam(info, criteria);
		return contentMapper.infoUpdateYearCount(example);
	}

	/**
	 * 信息更新合计 年
	 * 
	 * @param info
	 * @return
	 */
	public int infoUpdateYearSum(Content info) {
		ContentExample example = new ContentExample();
		Criteria criteria = example.createCriteria();
		proSearchParam(info, criteria);
		return contentMapper.infoUpdateYearSum(example);
	}

	/**
	 * 信息更新统计 月
	 * 
	 * @param info
	 * @return
	 */
	public List<Content> infoUpdateMonth(Content info) {
		ContentExample example = new ContentExample();
		Criteria criteria = example.createCriteria();
		proSearchParam(info, criteria);
		return contentMapper.infoUpdateMonth(example);
	}

	/**
	 * 信息更新统计 月
	 * 
	 * @param info
	 * @return
	 */
	public List<Content> infoUpdateMonth(Content info, int currPage,
			int pageSize) {
		ContentExample example = new ContentExample();
		Criteria criteria = example.createCriteria();
		proSearchParam(info, criteria);
		example.setCurrPage(currPage);
		example.setPageSize(pageSize);
		return contentMapper.infoUpdateMonthPage(example);
	}

	/**
	 * 信息更新统计 月
	 * 
	 * @param info
	 * @return
	 */
	public int infoUpdateMonthCount(Content info) {
		ContentExample example = new ContentExample();
		Criteria criteria = example.createCriteria();
		proSearchParam(info, criteria);
		return contentMapper.infoUpdateMonthCount(example);
	}

	/**
	 * 信息更新合计 月
	 * 
	 * @param info
	 * @return
	 */
	public int infoUpdateMonthSum(Content info) {
		ContentExample example = new ContentExample();
		Criteria criteria = example.createCriteria();
		proSearchParam(info, criteria);
		return contentMapper.infoUpdateMonthSum(example);
	}

	/**
	 * 信息更新统计 日
	 * 
	 * @param info
	 * @return
	 */
	public List<Content> infoUpdateDay(Content info) {
		ContentExample example = new ContentExample();
		Criteria criteria = example.createCriteria();
		proSearchParam(info, criteria);
		return contentMapper.infoUpdateDay(example);
	}

	/**
	 * 信息更新统计 日
	 * 
	 * @param info
	 * @return
	 */
	public List<Content> infoUpdateDay(Content info, int currPage, int pageSize) {
		ContentExample example = new ContentExample();
		Criteria criteria = example.createCriteria();
		proSearchParam(info, criteria);
		example.setCurrPage(currPage);
		example.setPageSize(pageSize);
		return contentMapper.infoUpdateDayPage(example);
	}

	/**
	 * 信息更新统计 日
	 * 
	 * @param info
	 * @return
	 */
	public int infoUpdateDayCount(Content info) {
		ContentExample example = new ContentExample();
		Criteria criteria = example.createCriteria();
		proSearchParam(info, criteria);
		return contentMapper.infoUpdateDayCount(example);
	}

	/**
	 * 信息更新合计 日
	 * 
	 * @param info
	 * @return
	 */
	public int infoUpdateDaySum(Content info) {
		ContentExample example = new ContentExample();
		Criteria criteria = example.createCriteria();
		proSearchParam(info, criteria);
		return contentMapper.infoUpdateDaySum(example);
	}

	/**
	 * 信息更新合计 周
	 * 
	 * @param info
	 * @return
	 */
	public int infoUpdateWeekSum(Content info) {
		ContentExample example = new ContentExample();
		Criteria criteria = example.createCriteria();
		proSearchParam(info, criteria);
		return contentMapper.infoUpdateWeekSum(example);
	}

	/**
	 * 信息更新统计 周
	 * 
	 * @param info
	 * @return
	 */
	public List<Content> infoUpdateWeek(Content info) {
		ContentExample example = new ContentExample();
		Criteria criteria = example.createCriteria();
		proSearchParam(info, criteria);
		return contentMapper.infoUpdateWeek(example);
	}

	/**
	 * 高级搜索 查询参数：（站点、栏目、时间、关键词）
	 */
	@Override
	public List<Content> allQuery(Content content, String order, int currPage,
			int pageSize) {
		List<Content> contentList = new ArrayList<Content>();
		HttpSolrServer solrServer = null;
		Config solrUrlConf = configService
				.findByCode(CmsConst.SOLR_SERVER_PATH);
		if (null != solrUrlConf) {
			String solrUrl = solrUrlConf.getCode();
			solrServer = SolrServer.getInstance().getServer(solrUrl);
		} else {
			return contentList;
		}

		SolrQuery sQuery = new SolrQuery();

		if (null != content) {
			String site = content.getSite();
			String channel = content.getChannel();
			String key = content.getSearchKey();
			if (null != site && site.trim().length() > 0) {
				sQuery.set("site", site);
			}
			if (null != channel && channel.trim().length() > 0) {
				sQuery.set("channel", channel);
			}
			if (null != key && key.trim().length() > 0) {
				sQuery.set("title", key);
				sQuery.set("showtitle", key);
				sQuery.set("description", key);
				sQuery.set("content", key);
			}
		}
		if (null != order && order.trim().length() > 0) {
			// 排序
			sQuery.addSort(order, ORDER.asc);
		}

		// 设置分页
		sQuery.setStart(currPage);
		sQuery.setRows(pageSize);
		QueryResponse response;
		try {
			response = solrServer.query(sQuery);
			SolrDocumentList list = response.getResults();
			if (null != list && list.size() > 0) {
				Content content_ = null;
				for (SolrDocument doc : list) {
					content_ = new Content();
					content_.setId(doc.getFieldValue("id").toString());
					content_.setTitle(doc.getFieldValue("title").toString());
					contentList.add(content_);
				}
			}
		} catch (SolrServerException e) {
			e.printStackTrace();
		}
		return contentList;
	}

	@Override
	public void addInfoIndex(List<Content> infoList) {
		// TODO Auto-generated method stub

	}

	@Override
	public void delteInfoIndex() {
		// TODO Auto-generated method stub

	}

}
