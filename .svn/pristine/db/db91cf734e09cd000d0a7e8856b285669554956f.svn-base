package com.gsccs.cms.controller.module;

import java.util.Date;
import java.util.List;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.commons.lang3.StringUtils;
import org.springframework.stereotype.Controller;
import org.springframework.ui.ModelMap;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;

import com.gsccs.cms.auth.service.UnitService;
import com.gsccs.cms.bass.controller.CmsBaseController;
import com.gsccs.cms.bass.utils.Pager;
import com.gsccs.cms.core.service.SensitiveService;
import com.gsccs.cms.course.model.Course;
import com.gsccs.cms.course.model.CourseFeed;
import com.gsccs.cms.course.model.CourseInfo;
import com.gsccs.cms.course.service.CourseService;
import com.gsccs.cms.member.model.Member;
import com.gsccs.cms.member.service.MemberService;

/**
 * 课程管理
 * 
 * @author x.d zhang
 * @version 1.0
 * 
 */
@Controller
@RequestMapping("/course")
public class CourseController extends CmsBaseController {

	@Resource
	private CourseService courseService;
	@Resource
	private UnitService unitService;
	@Resource
	private SensitiveService sensitiveService;
	@Resource
	private MemberService memberService;

	/**
	 * 管理页面
	 * 
	 * @param map
	 * @return
	 */
	@RequestMapping("/list.do")
	public String courseList(Course param, @RequestParam(defaultValue = "1") int currPage,
			@RequestParam(defaultValue = "10") int pageSize, @RequestParam(defaultValue = "addtime desc") String order,
			ModelMap map, HttpServletRequest request, HttpServletResponse response) {
		List<Course> courseList = courseService.find(param, order, currPage, pageSize);
		int totalCount = courseService.count(param);
		Pager pager = new Pager(request);
		pager.appendParam("id");
		pager.appendParam("title");
		pager.appendParam("pageSize", "" + pageSize);
		pager.appendParam("pageFuncId");
		pager.setCurrPage(currPage);
		pager.setPageSize(pageSize);
		pager.setTotalCount(totalCount);
		pager.setOutStrBootstrap("course/list.do");
		map.put("pageStr", pager.getOutStrBootstrap());
		map.put("list", courseList);
		map.put("order", order);

		return "course/course_list";
	}

	/**
	 * 编辑页面
	 * 
	 * @param map
	 * @return
	 */
	@RequestMapping("/form.do")
	public String form(String id, ModelMap map, HttpServletRequest request, HttpServletResponse response) {
		if (StringUtils.isNotEmpty(id)) {
			Course course = courseService.getCourse(id);

			map.put("course", course);
			return "course/course_form";
		} else {
			Member member = new Member();
			member.setWxappid(getManageSite().getId());
			List<Member> partyMember = memberService.find(member, "");

			map.put("partyMember", partyMember);
			return "course/course_form";
		}
	}

	/**
	 * 编辑
	 * 
	 * @param map
	 * @return
	 */
	@RequestMapping("/save.do")
	public String editDo(Course course, ModelMap map, HttpServletRequest request, HttpServletResponse response) {
		String oper = "添加";
		try {

			if (course != null && StringUtils.isNotEmpty(course.getId())) {
				// 敏感词处理
				course.setName(sensitiveService.replace(course.getName()));
			} else {
				// 添加
				course.setAddtime(new Date());
			}
			msg = oper + "课程(" + course.getName() + ")成功!";
		} catch (Exception e) {
			e.printStackTrace();
			msg = oper + "课程(" + course.getName() + ")失败:" + e.toString() + "!";
		}
		operlogService.log(getLoginName(), msg, request);
		map.put("msg", msg);
		map.put("isCloseWindow", true);
		map.put("isRefresh", true);
		return "admin/msg";
	}

	/**
	 * 删除
	 * 
	 * @param map
	 * @return
	 */
	@RequestMapping("/del.do")
	public String del(String pageFuncId, String ids, HttpServletRequest request, ModelMap map,
			HttpServletResponse response) {
		if (ids != null && ids.trim().length() > 0) {
			String[] idArr = ids.split(";");
			if (idArr != null && idArr.length > 0) {
				Course course = null;
				for (int i = 0; i < idArr.length; i++) {
					if (idArr[i].trim().length() > 0) {
						try {
							course = courseService.getCourse(idArr[i]);
							if (course != null) {
								courseService.delCourseById(course.getId());
								msg = "删除课程(" + course.getName() + ")成功!";
							}
						} catch (Exception e) {
							e.printStackTrace();
							msg = "删除课程(" + course.getName() + ")失败:" + e.toString() + "!";
						}
						operlogService.log(getLoginName(), msg, request);
					}
				}
			}
		}
		map.put("msg", "操作成功");
		map.put("forwardUrl", "course/list.do?pageFuncId=" + pageFuncId);
		map.put("forwardSeconds", 3);
		return "admin/msg";
	}

	/**
	 * 课程资料
	 * 
	 * @param map
	 * @return
	 */
	@RequestMapping("/infoList.do")
	public String infolist(String id, ModelMap map, HttpServletRequest request, HttpServletResponse response) {
		List<CourseInfo> infoList = courseService.findInfoList(id);
		map.put("list", infoList);
		return "course/course_infos";
	}

	/**
	 * 课程反馈
	 * 
	 * @param map
	 * @return
	 */
	@RequestMapping("/feedList.do")
	public String feedList(String id, ModelMap map, HttpServletRequest request, HttpServletResponse response) {
		Course course = courseService.getCourse(id);
		List<CourseFeed> feedList = courseService.findFeedList(course.getUnitid(), id);
		if (null != feedList && feedList.size() > 0) {
			for (CourseFeed guestbook : feedList) {
				List<CourseFeed> replyList = courseService.findByParid(guestbook.getId());
				guestbook.setReplyList(replyList);
			}
		}
		map.put("list", feedList);
		return "course/course_feeds";
	}

	/**
	 * 课程反馈
	 * 
	 * @param map
	 * @return
	 */
	@RequestMapping("/userList.do")
	public String userList(String id, ModelMap map, HttpServletRequest request, HttpServletResponse response) {
		Course course = courseService.getCourse(id);
		List<CourseFeed> feedList = courseService.findFeedList(course.getUnitid(), id);
		if (null != feedList && feedList.size() > 0) {
			for (CourseFeed guestbook : feedList) {
				List<CourseFeed> replyList = courseService.findByParid(guestbook.getId());
				guestbook.setReplyList(replyList);
			}
		}
		map.put("list", feedList);
		return "course/course_feeds";
	}

}
