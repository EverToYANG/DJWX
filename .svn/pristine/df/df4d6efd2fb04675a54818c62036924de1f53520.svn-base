package com.gsccs.cms.controller.member;

import java.io.File;
import java.util.List;
import java.util.UUID;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletResponse;

import org.springframework.stereotype.Controller;
import org.springframework.ui.ModelMap;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartFile;

import com.gsccs.cms.bass.controller.CmsBaseController;
import com.gsccs.cms.bass.utils.FileUtil;
import com.gsccs.cms.member.model.Memberauth;
import com.gsccs.cms.member.model.Membergroup;
import com.gsccs.cms.member.model.MembergroupAuth;
import com.gsccs.cms.member.service.MemberauthService;
import com.gsccs.cms.member.service.MembergroupAuthService;
import com.gsccs.cms.member.service.MembergroupService;

/**
 * 会员组相关操作
 * 
 * @author x.d zhang
 * @version 1.0
 * 
 */
@Controller
@RequestMapping("/member")
public class MembergroupController extends CmsBaseController {

	@Resource
	private MembergroupService membergroupService;
	@Resource
	private MemberauthService memberauthService;
	@Resource
	private MembergroupAuthService membergroupAuthService;

	/**
	 * 会员组管理页面
	 * 
	 * @param map
	 * @return
	 */
	@RequestMapping("/membergroup.do")
	public String membergroup(Membergroup membergroup, ModelMap map,
			HttpServletResponse response) {
		if (membergroup == null) {
			membergroup = new Membergroup();
		}
		List<Membergroup> membergroupList = membergroupService.find(
				membergroup, " ordernum ");
		map.put("list", membergroupList);
		return "cms/membergroup";
	}

	/**
	 * 会员组编辑页面
	 * 
	 * @param map
	 * @return
	 */
	@RequestMapping("/membergroupEdit.do")
	public String membergroupEdit(Membergroup membergroup, ModelMap map,
			HttpServletResponse response) {
		if (membergroup != null && membergroup.getId() != null
				&& membergroup.getId().trim().length() > 0) {
			membergroup = membergroupService.findById(membergroup.getId());
			map.put("membergroup", membergroup);
		}
		return "cms/membergroupEdit";
	}

	/**
	 * 会员组编辑
	 * 
	 * @param map
	 * @return
	 */

	@RequestMapping("/membergroupEditDo.do")
	public String membergroupEditDo(
			Membergroup membergroup,
			String oldImg,
			@RequestParam(value = "imgfile", required = false) MultipartFile imgfile,
			ModelMap map, HttpServletResponse response) {
		String oper = "添加";

		try {
			if (membergroup.getColor() != null) {
				membergroup.setColor("#" + membergroup.getColor());
			}
			if (membergroup.getId() != null
					&& membergroup.getId().trim().length() > 0) {
				// 更新
				oper = "更新";
				Membergroup oldmembergroup = membergroupService
						.findById(membergroup.getId());
				// 如果原来有和现在的logo不同则删除原来的logo文件
				if (!oldImg.equals(oldmembergroup.getImg())) {
					if (oldmembergroup.getImg() != null
							&& oldmembergroup.getImg().trim().length() > 0) {
						FileUtil.del(request.getRealPath("/")
								+ oldmembergroup.getImg().trim()
										.replaceAll("/", "\\\\"));
					}
				} else {
					membergroup.setImg(oldImg);
				}
				if (imgfile != null && imgfile.getSize() > 0) {
					// 生成目标文件
					String root = request.getRealPath("/");
					String ext = FileUtil.getExt(imgfile.getOriginalFilename())
							.toLowerCase();
					if (!".jpg".equals(ext) && !".jpeg".equals(ext)
							&& !".gif".equals(ext) && !".png".equals(ext)) {
						map.put("msg", "LOGO只能上传jpg,jpeg,gif,png格式的图片!");
						map.put("isBack", true);
						return "admin/msg";
					}
					String id = UUID.randomUUID().toString();
					File targetFile = new File(root + "/upload/member/" + id
							+ ext);
					File folder = new File(root + "/upload/member/");
					if (!folder.exists()) {
						folder.mkdirs();
					}
					if (!targetFile.exists()) {
						targetFile.createNewFile();
					}
					// 复制到目标文件
					FileUtil.copy(imgfile, targetFile);

					// 生成访问地址
					membergroup.setImg("/upload/member/" + id + ext);
				}
				membergroupService.update(membergroup);
				operlogService.log(getLoginName(), oper, request);
			} else {
				// 添加
				if (imgfile != null && imgfile.getSize() > 0) {
					// 生成目标文件

					String root = request.getRealPath("/");
					String ext = FileUtil.getExt(imgfile.getOriginalFilename())
							.toLowerCase();
					if (!".jpg".equals(ext) && !".jpeg".equals(ext)
							&& !".gif".equals(ext) && !".png".equals(ext)) {
						map.put("msg", "LOGO只能上传jpg,jpeg,gif,png格式的图片!");
						map.put("isBack", true);
						return "admin/msg";
					}
					String id = UUID.randomUUID().toString();
					File targetFile = new File(root + "/upload/member/" + id
							+ ext);
					File folder = new File(root + "/upload/member/");
					if (!folder.exists()) {
						folder.mkdirs();
					}
					if (!targetFile.exists()) {
						targetFile.createNewFile();
					}
					// 复制到目标文件
					FileUtil.copy(imgfile, targetFile);
					// 生成访问地址
					membergroup.setImg("/upload/member/" + id + ext);
				}
				membergroupService.insert(membergroup);
			}
			oper += "会员组(" + membergroup.getName() + ")成功!";
		} catch (Exception e) {
			oper += "会员组(" + membergroup.getName() + ") 失败:" + e.toString()
					+ "!";

		}
		operlogService.log(getLoginName(), oper, request);
		map.put("msg", oper);
		map.put("isCloseWindow", true);
		map.put("isRefresh", true);
		return "admin/msg";
	}

	/**
	 * 授权页面
	 * 
	 * @return
	 */
	@RequestMapping("/membergroupAuth.do")
	public String membergroupAuth(Membergroup membergroup, ModelMap map,
			HttpServletResponse response) {
		List<Memberauth> memberauthList = null;
		List<MembergroupAuth> membergroupAuthList = null;
		if (membergroup != null && membergroup.getId() != null
				&& membergroup.getId().trim().length() > 0) {
			// 查询所有会员权限，并设置当前会员组是否有权限
			memberauthList = memberauthService.find(null, " ordernum ");
			membergroupAuthList = membergroupAuthService
					.findByGroup(membergroup.getId());
			if (memberauthList != null && memberauthList.size() > 0) {
				for (int i = 0; i < memberauthList.size(); i++) {
					if (membergroupAuthList != null
							&& membergroupAuthList.size() > 0) {
						for (int j = 0; j < membergroupAuthList.size(); j++) {
							if (memberauthList
									.get(i)
									.getId()
									.equals(membergroupAuthList.get(j)
											.getAuthid())) {
								memberauthList.get(i).setHave(true);
								continue;
							}
						}
					}
				}
			}
		}
		map.put("groupid", membergroup.getId());
		map.put("memberauthlist", memberauthList);
		map.put("membergroupauthlist", membergroupAuthList);
		return "cms/membergroupAuth";
	}

	/**
	 * 授权处理
	 * 
	 * @return
	 */

	@RequestMapping("/membergroupAuthDo.do")
	public String authDo(Membergroup membergroup, String names, String[] ids,
			ModelMap map, HttpServletResponse response) {
		if (membergroup != null && membergroup.getId() != null
				&& membergroup.getId().trim().length() > 0) {
			membergroup = membergroupService.findById(membergroup.getId());
			if (membergroup != null) {
				try {
					// 先删除原来的权限
					membergroupAuthService.delByGroup(membergroup.getId());
					// 添加新的权限
					if (ids != null && ids.length > 0) {
						for (int i = 0; i < ids.length; i++) {
							if (ids[i].trim().length() > 0) {
								MembergroupAuth membergroupAuth = new MembergroupAuth();
								membergroupAuth.setAuthid(ids[i]);
								membergroupAuth.setGroupid(membergroup.getId());
								membergroupAuthService.add(membergroupAuth);
							}
						}
					}
					msg = "会员组授权成功(" + membergroup.getName() + " " + names
							+ ")";
				} catch (Exception e) {
					msg = "会员组授权失败(" + membergroup.getName() + " " + names
							+ "):" + e.getMessage();
				}
			}
		}
		operlogService.log(getLoginName(), msg, request);
		map.put("msg", msg);
		map.put("isCloseWindow", true);
		return "admin/msg";
	}

	/**
	 * 会员组删除
	 * 
	 * @param map
	 * @return
	 */

	@RequestMapping("/membergroupDel.do")
	public String membergroupDel(String pageFuncId, String ids, ModelMap map,
			HttpServletResponse response) {
		if (ids != null && ids.trim().length() > 0) {
			StringBuilder sb = new StringBuilder();
			String[] idArr = ids.split(";");
			if (idArr != null && idArr.length > 0) {
				Membergroup membergroup = null;
				for (int i = 0; i < idArr.length; i++) {
					if (idArr[i].trim().length() > 0) {
						try {
							membergroup = membergroupService.findById(idArr[i]);
							if (membergroup != null) {
								membergroupService.del(membergroup.getId());
								sb.append(idArr[i] + ";");
								msg = "删除会员组成功:" + membergroup.getName();
								map.put("forwardSeconds", 3);
							}
						} catch (Exception e) {
							msg = "删除会员组失败:" + membergroup.getName() + " "
									+ e.getMessage();
							map.put("forwardSeconds", 0);
						}
						operlogService.log(getLoginName(), msg, request);
					}
				}
			}

		}
		map.put("msg", msg);
		map.put("forwardUrl", "membergroup.do?pageFuncId=" + pageFuncId);
		return "admin/msg";
	}

}
