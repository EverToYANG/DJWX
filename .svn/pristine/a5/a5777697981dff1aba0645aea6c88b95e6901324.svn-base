package com.gsccs.cms.controller.auth;

import java.lang.ProcessBuilder.Redirect;
import java.util.ArrayList;
import java.util.List;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.commons.lang3.StringUtils;
import org.springframework.stereotype.Controller;
import org.springframework.ui.ModelMap;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import com.gsccs.cms.auth.model.Config;
import com.gsccs.cms.auth.model.Func;
import com.gsccs.cms.auth.service.FuncService;
import com.gsccs.cms.auth.utils.AuthConst;
import com.gsccs.cms.bass.controller.CmsBaseController;
import com.gsccs.cms.core.model.Content;
import com.gsccs.cms.core.model.RoleSite;
import com.gsccs.cms.core.model.Site;
import com.gsccs.cms.core.model.Visit;
import com.gsccs.cms.core.service.RoleSiteService;
import com.gsccs.cms.core.service.SiteService;
import com.gsccs.cms.core.service.VisitService;
import com.gsccs.cms.core.util.CmsConst;

/**
 * 后台管理相关操作
 * 
 * @author x.d zhang
 * @version 1.0
 * 
 */

@Controller
public class MainController extends CmsBaseController {

	@Resource
	private FuncService funcService;
	@Resource
	private SiteService siteService;
	@Resource
	private RoleSiteService roleSiteService;
	@Resource
	private VisitService visitService;

	/**
	 * 管理中心
	 * 
	 * @param map
	 * @return
	 */
	@RequestMapping("/index")
	public String index(String pageFuncId, ModelMap map,
			HttpServletResponse response) {
		// 先清除session变量
		Site manageSite = getCurrentSite();

		if (null == getCurrentSite()) {
			msg = "无可管理站点，请联系系统管理员分配权限！";
			map.put("msg", msg);
			map.put("isBack", true);
			return "admin/msg";
		}
		// 站点路径
		Config sitePathConfig = configService
				.findByCode(CmsConst.SITE_ROOT_PATH_CODE);
		String siteRoot = sitePathConfig.getConfigvalue();
		request.getSession()
				.setAttribute(AuthConst.CURRENT_SITE_ROOT, siteRoot);
		//request.getSession().setAttribute(AuthConst.CURRENT_SITE, manageSite);
		
		System.out.println("AuthConst.CURRENT_SITE:"+manageSite.getName());

		if (isSysAdmin() || isSiteAdmin()) {
			session.setAttribute("siteAdmin", true);
		} else {
			if (manageSite != null) {
				// 判断是否是站点管理员
				RoleSite roleSite = roleSiteService.findBySiteRoles(
						manageSite.getId(), getLoginRoleIdsSql(), "1");
				if (roleSite != null) {
					session.setAttribute("siteAdmin", true);
				}
			}
		}
		List<Func> funcList = null;
		// 如果是admin则显示所有一级菜单
		if (isSysAdmin()) {
			funcList = funcService.selectRoot();
		} else {
			funcList = funcService.selectRootAuth(getLoginUser().getId());
		}
		if (funcList != null && funcList.size() > 0) {
			String funcid = funcList.get(0).getId();
			map.put("funcList", funcList);
			map.put("funcid", funcid);
		}
		return "sysmg/index";
	}

	/**
	 * 管理中心 欢迎页面
	 * 
	 * @param map
	 * @return
	 */
	@RequestMapping("/main")
	public String main(@RequestParam(defaultValue = "day") String statType,
			@RequestParam(defaultValue = "1") int currPage,
			@RequestParam(defaultValue = "5") int pageSize, String pageFuncId,
			ModelMap map, HttpServletResponse response) {

		Site site = getManageSite();
		Visit visit = new Visit();
		Content content = new Content();
		content.setSite(getManageSite().getId());
		visit.setSiteid(getManageSite().getId());
		map.put("visit", visit);
		map.put("statType", "");

		int visitsum = 0;
		int contentsum = 0;
		List<Visit> visitList = null;
		List<Content> infoList = null;
		if ("year".equals(statType)) {
			// 按年统计
			visitsum = visitService.visitSum(visit);
			contentsum = contentService.infoUpdateYearSum(content);
			visitList = visitService.visitYear(visit, currPage, pageSize);
			infoList = contentService.infoUpdateYear(content, currPage,
					pageSize);
		}

		else if ("month".equals(statType)) {
			// 按月统计
			visitsum = visitService.visitSum(visit);
			contentsum = contentService.infoUpdateMonthSum(content);
			visitList = visitService.visitMonth(visit, currPage, pageSize);
			infoList = contentService.infoUpdateMonth(content, currPage,
					pageSize);
		} else if ("day".equals(statType)) {
			// 按日统计
			visitsum = visitService.visitSum(visit);
			contentsum = contentService.infoUpdateDaySum(content);

			visitList = visitService.visitDay(visit, currPage, pageSize);
			infoList = contentService
					.infoUpdateDay(content, currPage, pageSize);

		} else if ("week".equals(statType)) {
			// 按周统计
			visitsum = visitService.visitSum(visit);
			contentsum = contentService.infoUpdateWeekSum(content);
			visitList = visitService.visitWeek(visit);
			infoList = contentService.infoUpdateWeek(content);
		}

		map.put("site", site);
		map.put("visitsum", visitsum);
		map.put("contentsum", contentsum);
		map.put("visitList", visitList);
		map.put("infoList", infoList);
		return "sysmg/main";
	}

	/**
	 * 管理中心 头部
	 * 
	 * @param map
	 * @return
	 */
	@RequestMapping("/head.do")
	public String head(String pageFuncId, ModelMap map,
			HttpServletRequest request, HttpServletResponse response) {
		// 如果有pageFuncId参数，处理导航
		if (StringUtils.isNotEmpty(pageFuncId)) {
			map.put("funcNav",
					funcService.getPars(request.getSession(), pageFuncId, null));
			map.put("pageFuncId", pageFuncId);
		}
		return "admin/inc/head";
	}

	/**
	 * 管理中心 菜单
	 * 
	 * @param map
	 * @return
	 */
	@RequestMapping("/menu.do")
	public String menu(String funcid, ModelMap map,
			HttpServletRequest request, HttpServletResponse response) {
		List<Func> funcList = new ArrayList<Func>();
		if (funcid == null || funcid.trim().length() == 0) {
			if (session.getAttribute("funcid") != null
					&& StringUtils.isNotEmpty(session.getAttribute("funcid")
							.toString())) {
				funcid = session.getAttribute("funcid").toString();
			} else {
				// 设置为第一个根菜单
				// 提取一级菜单
				if (isSysAdmin()) {
					funcList = funcService.selectRoot();
				} else {
					funcList = funcService.selectRootAuth(getLoginUser().getId());
				}
				if (funcList != null && funcList.size() > 0) {
					funcid = funcList.get(0).getId();
				}
			}
		}
		session.setAttribute("funcid", funcid);
		// 提取权限并放到session中
		if (session.getAttribute("funcs") != null) {
			funcList = (List<Func>) session.getAttribute("funcs");
		} else {
			if (isSysAdmin()) {
				funcList = funcService.selectAll("1");
			} else {
				funcList = funcService.selectAllAuth(getLoginUser().getId());
			}
			if (funcList != null && funcList.size() > 0) {
				for (int i = 0; i < funcList.size(); i++) {
					if (funcService.haveSon(funcList.get(i).getId())) {
						funcList.get(i).setHasChildren("1");
					}
				}
			}
			session.setAttribute("funcs", funcList);
		}
		map.put("func", funcService.selectById(funcid));
		map.put("menuTree", funcService.createTree(request, funcid, funcList));
		return "sysmg/menu";
	}

	@ResponseBody
	@RequestMapping("/func_json.do")
	public List<Func> menujson(String funcid,
			ModelMap map, HttpServletRequest request,
			HttpServletResponse response) {
		List<Func> funcList = new ArrayList<Func>();
		if (StringUtils.isEmpty(funcid)) {
			// 提取一级菜单
			if (isSysAdmin()) {
				funcList = funcService.selectRoot();
			} else {
				funcList = funcService.selectRootAuth(getLoginUser().getId());
			}
			funcid = funcList.get(0).getId();
		} else {
			if (isSysAdmin()) {
				funcList = funcService.selectAll("1");
			} else {
				funcList = funcService.selectAllAuth(getLoginUser().getId());
			}
		}

		List<Func> userMenu = funcService.createTree(funcid, funcList);
		return userMenu;
	}
}
